#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: a9a9a9df-ceba-4358-a3a5-16a446ea2461
# Source File: C:\Users\Mark\Documents\GitHub\PoShLib\_Projects\Deploy-HNVGatewayCluster\Deploy-HNVGatewayCluster.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.76
     Generated on:       2/11/2015 11:11 AM
     Generated by:       Mark Scholman
     Organization:       Inovativ
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)
function Use-RunAs {
	# Check if script is running as Adminstrator and if not use RunAs
	# Use Check Switch to check if admin
	
	param ([Switch]$Check)
	
	$IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()`
).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
	
	if ($Check) { return $IsAdmin }
	
	if ($MyInvocation.ScriptName -ne "") {
		if (-not $IsAdmin) {
			try {
				$arg = "-file `"$($MyInvocation.ScriptName)`""
				Start-Process "$psHome\powershell.exe" -Verb Runas -ArgumentList $arg -ErrorAction 'stop'
			} catch {
				Write-Warning "Error - Failed to restart script with runas"
				break
			}
			exit # Quit this session of powershell
		}
	} else {
		Write-Warning "Error - Script must be saved as a .ps1 file first"
		break
	}
}
Use-RunAs
function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		$local:type = [ProgressBarOverlay]
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$Deploy = New-Object 'System.Windows.Forms.TabPage'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$progressbaroverlayDeploy = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$groupboxVMNodeInput = New-Object 'System.Windows.Forms.GroupBox'
	$comboboxLocalAdmin = New-Object 'System.Windows.Forms.ComboBox'
	$labelLocalAdministratorPa = New-Object 'System.Windows.Forms.Label'
	$buttonDeployGWVM1 = New-Object 'System.Windows.Forms.Button'
	$textboxGWVMClusterIP = New-Object 'System.Windows.Forms.TextBox'
	$labelGWClusterIPAddress = New-Object 'System.Windows.Forms.Label'
	$textboxGWVMClusterName = New-Object 'System.Windows.Forms.TextBox'
	$labelGWNETBIOSClusterName = New-Object 'System.Windows.Forms.Label'
	$textboxHNVVMName2 = New-Object 'System.Windows.Forms.TextBox'
	$comboboxHVHNode2 = New-Object 'System.Windows.Forms.ComboBox'
	$labelNode2VMNETBIOSName = New-Object 'System.Windows.Forms.Label'
	$labelHyperVNode2 = New-Object 'System.Windows.Forms.Label'
	$labelNode2 = New-Object 'System.Windows.Forms.Label'
	$textboxHNVVMName1 = New-Object 'System.Windows.Forms.TextBox'
	$comboboxHVHNode1 = New-Object 'System.Windows.Forms.ComboBox'
	$labelNode1VMNETBIOSName = New-Object 'System.Windows.Forms.Label'
	$labelHyperVNode1 = New-Object 'System.Windows.Forms.Label'
	$labelNode1 = New-Object 'System.Windows.Forms.Label'
	$groupboxGWInput = New-Object 'System.Windows.Forms.GroupBox'
	$comboboxHNVVMMRunas = New-Object 'System.Windows.Forms.ComboBox'
	$labelHNVVMMRunasAccount = New-Object 'System.Windows.Forms.Label'
	$comboboxHNVfrontEndSubnet = New-Object 'System.Windows.Forms.ComboBox'
	$labelHNVFrontendSubnet = New-Object 'System.Windows.Forms.Label'
	$comboboxHNVMgtSubnet = New-Object 'System.Windows.Forms.ComboBox'
	$labelHNVManagementSubnet = New-Object 'System.Windows.Forms.Label'
	$comboboxHVHGWCluster = New-Object 'System.Windows.Forms.ComboBox'
	$labelHyperVGWCluster = New-Object 'System.Windows.Forms.Label'
	$comboboxVMTemplate = New-Object 'System.Windows.Forms.ComboBox'
	$labelVMTemplate = New-Object 'System.Windows.Forms.Label'
	$comboboxHNVBackendNetwork = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxHNVfrontEndNetwork = New-Object 'System.Windows.Forms.ComboBox'
	$labelHNVBackendSwitch = New-Object 'System.Windows.Forms.Label'
	$labelHNVFrontendNetwork = New-Object 'System.Windows.Forms.Label'
	$comboboxHNVMgtNetwork = New-Object 'System.Windows.Forms.ComboBox'
	$labelHNVManagementNetwork = New-Object 'System.Windows.Forms.Label'
	$buttonConnectVMM = New-Object 'System.Windows.Forms.Button'
	$textboxVMMServer = New-Object 'System.Windows.Forms.TextBox'
	$labelVMMServerName = New-Object 'System.Windows.Forms.Label'
	$Import = New-Object 'System.Windows.Forms.TabPage'
	$groupboxImportNetworkService = New-Object 'System.Windows.Forms.GroupBox'
	$progressbaroverlayImport = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$labelSpecifyTheHostgroupF = New-Object 'System.Windows.Forms.Label'
	$labelBackendLogicalNetwor = New-Object 'System.Windows.Forms.Label'
	$comboboxBackEndLogicalNetwork = New-Object 'System.Windows.Forms.ComboBox'
	$buttonImportVMMnetworkService = New-Object 'System.Windows.Forms.Button'
	$checkedlistboxHostGroups = New-Object 'System.Windows.Forms.CheckedListBox'
	$Migrate = New-Object 'System.Windows.Forms.TabPage'
	$groupboxGatewayMigration = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMigrateNetwork = New-Object 'System.Windows.Forms.Button'
	$labelSelectCustomerNetwor = New-Object 'System.Windows.Forms.Label'
	$comboboxSelectCustNetwork = New-Object 'System.Windows.Forms.ComboBox'
	$checkboxMigrateSingleNetwork = New-Object 'System.Windows.Forms.CheckBox'
	$progressbaroverlayMigrate = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$datagridVMNetworksTargetGW = New-Object 'System.Windows.Forms.DataGridView'
	$datagridVMNetworksCurrentGW = New-Object 'System.Windows.Forms.DataGridView'
	$buttonMigrateGWCluster = New-Object 'System.Windows.Forms.Button'
	$labelHNVFQDNDomain = New-Object 'System.Windows.Forms.Label'
	$textboxGWVMFQDNDomain = New-Object 'System.Windows.Forms.TextBox'
	$labelLabelTargetGWClusterIP = New-Object 'System.Windows.Forms.Label'
	$comboboxTargetGWCluster = New-Object 'System.Windows.Forms.ComboBox'
	$labelTargetGatewayCluster = New-Object 'System.Windows.Forms.Label'
	$labelWarningVPNConnection = New-Object 'System.Windows.Forms.Label'
	$buttonLoadGWData = New-Object 'System.Windows.Forms.Button'
	$labelSourceGatewayCluster = New-Object 'System.Windows.Forms.Label'
	$comboboxSourceGWCluster = New-Object 'System.Windows.Forms.ComboBox'
	$Tools = New-Object 'System.Windows.Forms.TabPage'
	$groupboxAddExtIp = New-Object 'System.Windows.Forms.GroupBox'
	$labelSelectAUnassignedIP = New-Object 'System.Windows.Forms.Label'
	$comboboxUnassignedIP = New-Object 'System.Windows.Forms.ComboBox'
	$buttonAddIP = New-Object 'System.Windows.Forms.Button'
	$labelVirtualNetwork = New-Object 'System.Windows.Forms.Label'
	$comboboxVMNetwork = New-Object 'System.Windows.Forms.ComboBox'
	$labelAddExtraIPToCustomer = New-Object 'System.Windows.Forms.Label'
	$errorproviderEmptyVMM = New-Object 'System.Windows.Forms.ErrorProvider'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$OnLoadFormEvent = {
		
	}
	
	#region Buttons
	$buttonConnectVMM_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		Get-SCVMMServer $textboxVMMServer.Text | Out-Null
		$VMNetwork = Get-SCVMNetwork | Select-Object -ExpandProperty Name | Sort-Object
		$PAVMNetwork = Get-SCVirtualNetwork | Select-Object -ExpandProperty name -Unique
		$VMTemplate = Get-SCVMTemplate | Select-Object -ExpandProperty Name
		$HVHCluster = Get-SCVMHostCluster | Select-Object -ExpandProperty Name
		$HNVVMMRunasAccount = Get-SCRunAsAccount | Select-Object -ExpandProperty Name
		$HostGroups = Get-SCVMHostGroup | Sort-Object | Select-Object -ExpandProperty path
		Load-ListBox -ListBox $checkedlistboxHostGroups -Items $HostGroups
		
		$BELogicalNetwork = Get-SCLogicalNetwork | Where-Object { $_.UseGRE -eq $true }
		Load-ComboBox -ComboBox $comboboxHNVMgtNetwork -Items $VMNetwork
		Load-ComboBox -ComboBox $comboboxHNVfrontEndNetwork -Items $VMNetwork
		Load-ComboBox -ComboBox $comboboxHNVBackendNetwork -Items $PAVMNetwork
		Load-ComboBox -ComboBox $comboboxHVHGWCluster -Items $HVHCluster
		Load-ComboBox -ComboBox $comboboxVMTemplate -Items $VMTemplate
		Load-ComboBox -ComboBox $comboboxHNVVMMRunas -Items $HNVVMMRunasAccount
		Load-ComboBox -ComboBox $comboboxLocalAdmin -Items $HNVVMMRunasAccount
		Load-ComboBox -ComboBox $comboboxBackEndLogicalNetwork -Items $BELogicalNetwork
		Load-ComboBox -ComboBox $comboboxVMNetwork -Items $VMNetwork
		$groupboxGWInput.Visible = $true
		$groupboxVMNodeInput.Visible = $true
		$groupboxGatewayMigration.Visible = $true
		$groupboxImportNetworkService.Visible = $true
		$MainForm.Cursor = $cursor
	}
	
	$buttonDeployGWVM1_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		
		$progressbaroverlayDeploy.Visible = $true
		$progressbaroverlayDeploy.Value = 1
		$progressbaroverlayDeploy.TextOverlay = "Get Credentials"
		$cred = Get-Credential -Message "Enter Credentials for remote connect to HNV Domain"
		
		$progressbaroverlayDeploy.Value = 5
		$progressbaroverlayDeploy.TextOverlay = "Checking Remote Powershell"
		
		#Get-SCVMMServer $textboxVMMServer.Text | Out-Null
		$vmmservers = (Get-SCVMMManagedComputer | Where-Object { $_.Role -eq "VMMServerRole" }).Name
		$thisserver = "$env:computername.$env:userdnsdomain"
		if ($vmmservers -notcontains $thisserver) {
			Set-Item WSMan:\localhost\Client\TrustedHosts * -Force
			Enable-WSManCredSSP -Role Client -DelegateComputer * -Force
			Start-Sleep -Seconds 2
			New-ItemProperty HKLM:\Software\Policies\Microsoft\Windows\CredentialsDelegation\ -Name AllowFreshCredentialsWhenNTLMOnly -Value 1 -ErrorAction 'SilentlyContinue'
			New-ItemProperty HKLM:\Software\Policies\Microsoft\Windows\CredentialsDelegation\ -Name ConcatenateDefaults_AllowFreshNTLMOnly -Value 1 -ErrorAction 'SilentlyContinue'
			New-Item HKLM:\Software\Policies\Microsoft\Windows\CredentialsDelegation\AllowFreshCredentialsWhenNTLMOnly -ErrorAction 'SilentlyContinue'
			New-ItemProperty HKLM:\Software\Policies\Microsoft\Windows\CredentialsDelegation\AllowFreshCredentialsWhenNTLMOnly\ -Name "HNVToolkit" -Value "wsman/*" -ErrorAction 'SilentlyContinue'
		}
		$progressbaroverlayDeploy.Value = 15
		$progressbaroverlayDeploy.TextOverlay = "Creating VM Node 1"
		$Domain = Invoke-Command -ScriptBlock { $env:userdnsdomain } -ComputerName $comboboxHVHNode1.Text -Credential $cred
		Deploy-GatewayVM -HVHHost $comboboxHVHNode1.Text -ServerName $textboxHNVVMName1.Text -Domain $Domain -VMBENetwork $comboboxHNVBackendNetwork.Text -VMFENetwork $comboboxHNVfrontEndNetwork.Text -VMFESubnet $comboboxHNVfrontEndSubnet.Text -VMMGTNetwork $comboboxHNVMgtNetwork.Text -VMMGTSubnet $comboboxHNVMgtSubnet.Text -VMMServer $textboxVMMServer.Text -VMTemplate $comboboxVMTemplate.Text -VMLocalAdmin $comboboxLocalAdmin.Text -Cred $cred
		
		$progressbaroverlayDeploy.Value = 25
		$progressbaroverlayDeploy.TextOverlay = "Creating VM Node 2"
		Deploy-GatewayVM -HVHHost $comboboxHVHNode2.Text -ServerName $textboxHNVVMName2.Text -Domain $Domain -VMBENetwork $comboboxHNVBackendNetwork.Text -VMFENetwork $comboboxHNVfrontEndNetwork.Text -VMFESubnet $comboboxHNVfrontEndSubnet.Text -VMMGTNetwork $comboboxHNVMgtNetwork.Text -VMMGTSubnet $comboboxHNVMgtSubnet.Text -VMMServer $textboxVMMServer.Text -VMTemplate $comboboxVMTemplate.Text -VMLocalAdmin $comboboxLocalAdmin.Text -Cred $cred
		
		$progressbaroverlayDeploy.Value = 35
		$progressbaroverlayDeploy.TextOverlay = "Waiting for both nodes to be up"
		$GWVMNode1 = (Get-SCVirtualMachine -Name $textboxHNVVMName1.Text).ComputerName
		$GWVMNode2 = (Get-SCVirtualMachine -Name $textboxHNVVMName2.Text).ComputerName
		
		Wait-NodesUp
		
		$progressbaroverlayDeploy.Value = 45
		$progressbaroverlayDeploy.TextOverlay = "Configure GW VM Roles and features"
		$Runas = Construct-RunasAccount -RunasAccount $comboboxHNVVMMRunas.Text
		$FESubnet = (Get-SCVMSubnet $comboboxHNVfrontEndSubnet.Text).SubnetVLans.Subnet
		$Subnetfe = $FESubnet.Split('.')
		$FESubnet16 = $Subnetfe[0] + "." + $Subnetfe[1] + "."
		$MgtSubnet = (Get-SCVMSubnet $comboboxHNVMgtSubnet.Text).SubnetVLans.Subnet
		$Subnetmgt = $MgtSubnet.Split('.')
		$MgtSubnet16 = $Subnetmgt[0] + "." + $Subnetmgt[1] + "."
		Configure-GatewayVM -FENetworkSubnet $FESubnet16 -MgtNetworkSubnet $MgtSubnet16 -GWVMNode1 $GWVMNode1 -GWVMNode2 $GWVMNode2 -cred $cred -RunasAccount $Runas
		
		$progressbaroverlayDeploy.Value = 65
		$progressbaroverlayDeploy.TextOverlay = "Configure GW VM Backend network"
		Configure-GatewayBackendNetwork -GWVMNode1 $textboxHNVVMName1.Text -GWVMNode2 $textboxHNVVMName2.Text -BENetwork $comboboxHNVBackendNetwork.Text -VMMServer $textboxVMMServer.Text
		
		$progressbaroverlayDeploy.Value = 75
		$progressbaroverlayDeploy.TextOverlay = "Configure Shared VHDX on GW VM's"
		Configure-SharedVHDX -GWVMNode1 $textboxHNVVMName1.Text -GWVMNode2 $textboxHNVVMName2.Text -GWVMClusterName $textboxGWVMClusterName.Text -HVHNode1 $comboboxHVHNode1.Text -HVHNode2 $comboboxHVHNode2.Text -Cred $cred
		
		$progressbaroverlayDeploy.Value = 85
		$progressbaroverlayDeploy.TextOverlay = "Waiting for both nodes to be up"
		Wait-NodesUp
		
		$progressbaroverlayDeploy.Value = 95
		$progressbaroverlayDeploy.TextOverlay = "Configure GW VM Cluster"
		Configure-GatewayVMCluster -GWVMNode1FQDN $GWVMNode1 -GWVMNode1 $textboxHNVVMName1.Text -GWVMNode2 $textboxHNVVMName2.Text -FENetworkSubnet $FESubnet -ClusterName $textboxGWVMClusterName.Text -ClusterIP $textboxGWVMClusterIP.Text -cred $cred
		
		if ($vmmservers -notcontains $thisserver) {
			Disable-WSManCredSSP -Role Client
			Remove-Item HKLM:\Software\Policies\Microsoft\Windows\CredentialsDelegation -Recurse -ErrorAction SilentlyContinue
			Clear-Item WSMan:\localhost\Client\TrustedHosts -Force
		}
		
		$progressbaroverlayDeploy.Value = 100
		$progressbaroverlayDeploy.TextOverlay = "We are done!"
		$MainForm.Cursor = $cursor
	}
	
	$buttonImportVMMnetworkService_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		
		$progressbaroverlayImport.Visible = $true
		$progressbaroverlayImport.Value = 45
		$progressbaroverlayImport.TextOverlay = "Importing Network Service..."
		$HostGroups = @()
		foreach ($item in $checkedlistboxHostGroups.CheckedItems) {
			$HostGroups += @(Get-SCVMHostGroup | Where-Object { $_.Path -eq $item } | Select-Object -ExpandProperty Name)
		}
		$VM = (Get-SCVirtualMachine -Name $textboxHNVVMName1.Text).Name
		$ComputerFQDN = (Get-SCVirtualMachine -Name $textboxHNVVMName1.Text).ComputerName
		$Domain = $ComputerFQDN.TrimStart($vm)
		$GatewayVMCLusterFQDN = $textboxGWVMClusterName.Text + $Domain
		$GatewayVMCLusterFQDN = $GatewayVMCLusterFQDN.ToUpper()
		$comboboxHVHGWCluster = $comboboxHVHGWCluster.Text.ToUpper()
		Add-VMMNetworkService -BackendSwitch $comboboxHNVBackendNetwork.Text -BELogicalNetwork $comboboxBackEndLogicalNetwork.Text -FEVMNetwork $comboboxHNVfrontEndNetwork.Text -HNVGWVMClusterNetbios $textboxGWVMClusterName.Text -HostGroup $HostGroups -RunasAccount $comboboxHNVVMMRunas.Text -HVHGatewayCluster $comboboxHVHGWCluster -VMMServer $textboxVMMServer.Text -HNVGWVMCluster $GatewayVMCLusterFQDN
		$progressbaroverlayImport.Value = 100
		$progressbaroverlayImport.TextOverlay = "Network Service imported. Please check VMM..."
		$MainForm.Cursor = $cursor
		
	}
	
	$buttonLoadGWData_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		
		$GatewayNames = (Get-SCNetworkGateway).Name
		Load-ComboBox -ComboBox $comboboxSourceGWCluster -Items $GatewayNames
		Load-ComboBox -ComboBox $comboboxTargetGWCluster -Items $GatewayNames
		$MainForm.Cursor = $cursor
		
	}
	
	$buttonMigrateGWCluster_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		
		$progressbaroverlayMigrate.Visible = $true
		$progressbaroverlayMigrate.Value = 50
		$progressbaroverlayMigrate.TextOverlay = "Migrating Resources..."
		if ($comboboxSourceGWCluster.Text -ne $comboboxTargetGWCluster.Text) {
			Migrate-HNVgatewayCluster -CurrentNetworkGatewayName $comboboxSourceGWCluster.Text -NewNetworkGatewayName $comboboxTargetGWCluster.Text -VMMServer $textboxVMMServer.Text
			$datagridVMNetworksTargetGW.DataSource = $null
			$datagridVMNetworksCurrentGW.DataSource = $null
			$labelWarningVPNConnection.Visible = $false
			$labelGWClusterIPAddress.Visible = $false
			$progressbaroverlayMigrate.Value = 75
			$progressbaroverlayMigrate.TextOverlay = "Refreshing View..."
			$SourceVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxSourceGWCluster.Text }
			$SourceNetwork = @()
			foreach ($network in $SourceVMNetworks) {
				$SourceNetwork += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object Name, Owner, @{ Name = "VPNConnections"; Expression = { $_.VPNConnections.Name } }
			}
			if ($SourceVMNetworks -ne $null) {
				Load-DataGridView -DataGridView $datagridVMNetworksCurrentGW -Item $SourceNetwork
				if ($SourceVMNetworks.VPNConnections -ne $null) {
					$labelWarningVPNConnection.Visible = $true
				}
			}
			$TargetVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxTargetGWCluster.Text }
			$TargetNetwork = @()
			foreach ($network in $TargetVMNetworks) {
				$TargetNetwork += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object Name, Owner, @{ Name = "VPNConnections"; Expression = { $_.VPNConnections.Name } }
			}
			if ($TargetVMNetworks -ne $null) {
				Load-DataGridView -DataGridView $datagridVMNetworksTargetGW -Item $TargetNetwork
			}
			$comboboxSelectCustNetwork.Text = ""
			$progressbaroverlayMigrate.Value = 100
			$progressbaroverlayMigrate.TextOverlay = "Resources Migrated !"
		} else {
			$progressbaroverlayMigrate.Value = 100
			$progressbaroverlayMigrate.TextOverlay = "Source and destination are the same !!"
		}
		$MainForm.Cursor = $cursor
	}
	
	$buttonMigrateNetwork_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		
		$progressbaroverlayMigrate.Visible = $true
		$progressbaroverlayMigrate.Value = 50
		$progressbaroverlayMigrate.TextOverlay = "Migrating Network..."
		if ($comboboxSourceGWCluster.Text -ne $comboboxTargetGWCluster.Text) {
			Migrate-HNVNetwork -CustomerVMNetwork $comboboxSelectCustNetwork.Text -NewNetworkGatewayName $comboboxTargetGWCluster.Text -VMMServer $textboxVMMServer.Text
			$datagridVMNetworksTargetGW.DataSource = $null
			$datagridVMNetworksCurrentGW.DataSource = $null
			$labelWarningVPNConnection.Visible = $false
			$labelGWClusterIPAddress.Visible = $false
			$progressbaroverlayMigrate.Value = 75
			$progressbaroverlayMigrate.TextOverlay = "Refreshing View..."
			$SourceVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxSourceGWCluster.Text }
			$SourceNetwork = @()
			foreach ($network in $SourceVMNetworks) {
				$SourceNetwork += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object Name, Owner, @{ Name = "VPNConnections"; Expression = { $_.VPNConnections.Name } }
			}
			if ($SourceVMNetworks -ne $null) {
				Load-DataGridView -DataGridView $datagridVMNetworksCurrentGW -Item $SourceNetwork
				if ($SourceVMNetworks.VPNConnections -ne $null) {
					$labelWarningVPNConnection.Visible = $true
				}
			}
			$TargetVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxTargetGWCluster.Text }
			$TargetNetwork = @()
			foreach ($network in $TargetVMNetworks) {
				$TargetNetwork += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object Name, Owner, @{ Name = "VPNConnections"; Expression = { $_.VPNConnections.Name } }
			}
			if ($TargetVMNetworks -ne $null) {
				Load-DataGridView -DataGridView $datagridVMNetworksTargetGW -Item $TargetNetwork
			}
			$comboboxSelectCustNetwork.Text = ""
			$progressbaroverlayMigrate.Value = 100
			$progressbaroverlayMigrate.TextOverlay = "Network Migrated !"
		} else {
			$progressbaroverlayMigrate.Value = 100
			$progressbaroverlayMigrate.TextOverlay = "Source and destination are the same !!"
		}
		$MainForm.Cursor = $cursor
	}
	
	$buttonAddIP_Click = {
		$cursor = $MainForm.Cursor
		$MainForm.Cursor = [System.Windows.Forms.Cursors]::WaitCursor
		$VMNetwork = Get-SCVMNetwork $comboboxVMNetwork.Text
		$VmNetworkGateway = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.Name -eq $vmNetwork.VMNetworkGateways.Name }
		$ComputerName = $VmNetworkGateway.NetworkGateway.Name + "." + $Domain
		$ipaddress = $VmNetworkGateway.NATConnections.Rules.ExternalIpAddress.IpAddressToString | Select-Object -Unique -First 1
		$newipaddress = $comboboxUnassignedIP.Text
		Add-ExternalIP -ipaddress $ipaddress -newipaddress $newipaddress -ComputerName $ComputerName -cred $cred
		$MainForm.Cursor = $cursor
	}
	
	
	#endregion
	
	#region SelectedIdexChanged
	$comboboxHNVMgtNetwork_SelectedIndexChanged = {
		$VMSubnet = Get-SCVMNetwork $comboboxHNVMgtNetwork.Text | Select-Object -ExpandProperty VMSubnet | Select-Object -ExpandProperty name | Sort-Object
		Load-ComboBox -ComboBox $comboboxHNVMgtSubnet -Items $VMSubnet
	}
	
	$comboboxHNVfrontEndNetwork_SelectedIndexChanged = {
		$VMSubnet = Get-SCVMNetwork $comboboxHNVfrontEndNetwork.Text | Select-Object -ExpandProperty VMSubnet | Select-Object -ExpandProperty name | Sort-Object
		Load-ComboBox -ComboBox $comboboxHNVfrontEndSubnet -Items $VMSubnet
	}
	
	$comboboxHVHGWCluster_SelectedIndexChanged = {
		$HVHNodes = Get-SCVMHostCluster $comboboxHVHGWCluster.Text | Get-SCVMHost | Select-Object -ExpandProperty Name
		Load-ComboBox -ComboBox $comboboxHVHNode1 -Items $HVHNodes
		Load-ComboBox -ComboBox $comboboxHVHNode2 -Items $HVHNodes
	}
	
	$comboboxSourceGWCluster_SelectedIndexChanged = {
		$progressbaroverlayMigrate.Visible = $false
		$labelWarningVPNConnection.Visible = $false
		$labelGWClusterIPAddress.Visible = $false
		$datagridVMNetworksCurrentGW.DataSource = $null
		$comboboxSelectCustNetwork.Text = ""
		$SourceVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxSourceGWCluster.Text }
		if ($SourceVMNetworks -ne $null) {
			$SourceNetwork = @()
			foreach ($network in $SourceVMNetworks) {
				$SourceNetwork += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object Name, Owner, @{ Name = "VPNConnections"; Expression = { $_.VPNConnections.Name } }
			}
			Load-DataGridView -DataGridView $datagridVMNetworksCurrentGW -Item $SourceNetwork
			$SourceNetworkName = @()
			foreach ($network in $SourceVMNetworks) {
				$SourceNetworkName += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object -ExpandProperty Name
			}
			Load-ComboBox -ComboBox $comboboxSelectCustNetwork -Items $SourceNetworkName
			
			if ($SourceVMNetworks.VPNConnections -ne $null) {
				$labelWarningVPNConnection.Visible = $true
			}
		}
	}
	
	$comboboxTargetGWCluster_SelectedIndexChanged = {
		$progressbaroverlayMigrate.Visible = $false
		$labelGWClusterIPAddress.Visible = $false
		$datagridVMNetworksTargetGW.DataSource = $null
		$SourceVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxSourceGWCluster.Text }
		$TargetVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxTargetGWCluster.Text }
		
		if ($TargetVMNetworks -ne $null) {
			$TargetNetwork = @()
			foreach ($network in $TargetVMNetworks) {
				$TargetNetwork += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object Name, Owner, @{ Name = "VPNConnections"; Expression = { $_.VPNConnections.Name } }
			}
			Load-DataGridView -DataGridView $datagridVMNetworksTargetGW -Item $TargetNetwork
		}
		
		if ($SourceVMNetworks.VPNConnections -ne $null) {
			$labelGWClusterIPAddress.Visible = $true
			
			$FQDNGWVM = $comboboxTargetGWCluster.Text + "." + $textboxGWVMFQDNDomain.Text
			#$cred = Get-Credential -Message "Enter Credentials to retrieve ip address from the Gateway Cluster"
			#$ipaddress = Invoke-Command -ScriptBlock {
			#	$X = Get-ClusterGroup "HyperV Network Virtualization Gateway" | Get-ClusterResource | ? { $_.ResourceType -eq "IP Address" } | Get-ClusterParameter -Name Address
			#	$x | Select-Object -ExpandProperty Value
			#	return $x
			#} -ComputerName $FQDNGWVM -Credential $cred
			$labelGWClusterIPAddress.Visible = $true
			$labelGWClusterIPAddress.Text = "The new ip address for VPN Customer's is $ipaddress"
		}
	}
	
	$checkboxMigrateSingleNetwork_CheckedChanged = {
		$progressbaroverlayMigrate.Visible = $false
		if ($checkboxMigrateSingleNetwork.Checked) {
			$progressbaroverlayMigrate.Location.Y = 131
			$SourceVMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $comboboxSourceGWCluster.Text }
			$x = @()
			foreach ($network in $SourceVMNetworks) {
				$x += Get-SCVMNetwork -Name $network.VMNetwork | Select-Object -ExpandProperty Name
			}
			Load-ComboBox -ComboBox $comboboxSelectCustNetwork -Items $x
			$datagridVMNetworksCurrentGW.Visible = $false
			$buttonMigrateGWCluster.Visible = $false
			$labelSelectCustomerNetwor.Visible = $true
			$comboboxSelectCustNetwork.Visible = $true
			$buttonMigrateNetwork.Visible = $true
		} else {
			$progressbaroverlayMigrate.Location.Y = 391
			$datagridVMNetworksCurrentGW.Visible = $true
			$buttonMigrateGWCluster.Visible = $true
			$labelSelectCustomerNetwor.Visible = $false
			$comboboxSelectCustNetwork.Visible = $false
			$buttonMigrateNetwork.Visible = $false
		}
	}
	
	$comboboxHNVfrontEndSubnet_SelectedIndexChanged = {
		$IPPool = (Get-SCStaticIPAddressPool | ? { $_.VMSubnet -match $comboboxHNVfrontEndSubnet.Text })
		$AssignedIPs = Get-SCIPAddress -Assigned -StaticIPAddressPool $IPPool
		$IPPoolStartIP = $IPPool.IPAddressRangeStart
		$IPPoolEndIP = $IPPool.IPAddressRangeEnd
		$IPPoolStartIP = $IPPoolStartIP.Split(".")
		$IPPoolEndIP = $IPPoolEndIP.Split(".")
		$externalip = @("")
		for ($i = [int]$IPPoolStartIP[3]; $i -lt [int]$IPPoolEndIP[3]; $i++) {
			$externalip += $IPPoolStartIP[0] + "." + $IPPoolStartIP[1] + "." + $IPPoolStartIP[2] + "." + $i
		}
		foreach ($ip in $AssignedIPs.name) {
			$externalip = $externalip | ? { $_ -ne $ip }
		}
		Load-ComboBox -ComboBox $comboboxUnassignedIP -Items $externalip
	}
	
	#endregion
	
	#region Events
	$textboxVMMServer_Validated = {
		$errorproviderEmptyVMM.SetError($this, "");
	}
	
	$textboxVMMServer_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#Check if the Name field is empty
		$_.Cancel = Validate-IsEmptyTrim $textboxVMMServer.Text
		if ($_.Cancel) {
			#Display an error message
			$errorproviderEmptyVMM.SetError($textboxVMMServer, "Please enter VMM ServerName.");
		}
	}
	#endregion	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox1 = $richtextbox1.Text
		$script:MainForm_comboboxLocalAdmin = $comboboxLocalAdmin.Text
		$script:MainForm_comboboxLocalAdmin_SelectedItem = $comboboxLocalAdmin.SelectedItem
		$script:MainForm_textboxGWVMClusterIP = $textboxGWVMClusterIP.Text
		$script:MainForm_textboxGWVMClusterName = $textboxGWVMClusterName.Text
		$script:MainForm_textboxHNVVMName2 = $textboxHNVVMName2.Text
		$script:MainForm_comboboxHVHNode2 = $comboboxHVHNode2.Text
		$script:MainForm_comboboxHVHNode2_SelectedItem = $comboboxHVHNode2.SelectedItem
		$script:MainForm_textboxHNVVMName1 = $textboxHNVVMName1.Text
		$script:MainForm_comboboxHVHNode1 = $comboboxHVHNode1.Text
		$script:MainForm_comboboxHVHNode1_SelectedItem = $comboboxHVHNode1.SelectedItem
		$script:MainForm_comboboxHNVVMMRunas = $comboboxHNVVMMRunas.Text
		$script:MainForm_comboboxHNVVMMRunas_SelectedItem = $comboboxHNVVMMRunas.SelectedItem
		$script:MainForm_comboboxHNVfrontEndSubnet = $comboboxHNVfrontEndSubnet.Text
		$script:MainForm_comboboxHNVfrontEndSubnet_SelectedItem = $comboboxHNVfrontEndSubnet.SelectedItem
		$script:MainForm_comboboxHNVMgtSubnet = $comboboxHNVMgtSubnet.Text
		$script:MainForm_comboboxHNVMgtSubnet_SelectedItem = $comboboxHNVMgtSubnet.SelectedItem
		$script:MainForm_comboboxHVHGWCluster = $comboboxHVHGWCluster.Text
		$script:MainForm_comboboxHVHGWCluster_SelectedItem = $comboboxHVHGWCluster.SelectedItem
		$script:MainForm_comboboxVMTemplate = $comboboxVMTemplate.Text
		$script:MainForm_comboboxVMTemplate_SelectedItem = $comboboxVMTemplate.SelectedItem
		$script:MainForm_comboboxHNVBackendNetwork = $comboboxHNVBackendNetwork.Text
		$script:MainForm_comboboxHNVBackendNetwork_SelectedItem = $comboboxHNVBackendNetwork.SelectedItem
		$script:MainForm_comboboxHNVfrontEndNetwork = $comboboxHNVfrontEndNetwork.Text
		$script:MainForm_comboboxHNVfrontEndNetwork_SelectedItem = $comboboxHNVfrontEndNetwork.SelectedItem
		$script:MainForm_comboboxHNVMgtNetwork = $comboboxHNVMgtNetwork.Text
		$script:MainForm_comboboxHNVMgtNetwork_SelectedItem = $comboboxHNVMgtNetwork.SelectedItem
		$script:MainForm_textboxVMMServer = $textboxVMMServer.Text
		$script:MainForm_comboboxBackEndLogicalNetwork = $comboboxBackEndLogicalNetwork.Text
		$script:MainForm_comboboxBackEndLogicalNetwork_SelectedItem = $comboboxBackEndLogicalNetwork.SelectedItem
		$script:MainForm_checkedlistboxHostGroups = $checkedlistboxHostGroups.SelectedItems
		$script:MainForm_comboboxSelectCustNetwork = $comboboxSelectCustNetwork.Text
		$script:MainForm_comboboxSelectCustNetwork_SelectedItem = $comboboxSelectCustNetwork.SelectedItem
		$script:MainForm_checkboxMigrateSingleNetwork = $checkboxMigrateSingleNetwork.Checked
		$script:MainForm_textboxGWVMFQDNDomain = $textboxGWVMFQDNDomain.Text
		$script:MainForm_comboboxTargetGWCluster = $comboboxTargetGWCluster.Text
		$script:MainForm_comboboxTargetGWCluster_SelectedItem = $comboboxTargetGWCluster.SelectedItem
		$script:MainForm_comboboxSourceGWCluster = $comboboxSourceGWCluster.Text
		$script:MainForm_comboboxSourceGWCluster_SelectedItem = $comboboxSourceGWCluster.SelectedItem
		$script:MainForm_comboboxUnassignedIP = $comboboxUnassignedIP.Text
		$script:MainForm_comboboxUnassignedIP_SelectedItem = $comboboxUnassignedIP.SelectedItem
		$script:MainForm_comboboxVMNetwork = $comboboxVMNetwork.Text
		$script:MainForm_comboboxVMNetwork_SelectedItem = $comboboxVMNetwork.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDeployGWVM1.remove_Click($buttonDeployGWVM1_Click)
			$comboboxHNVfrontEndSubnet.remove_SelectedIndexChanged($comboboxHNVfrontEndSubnet_SelectedIndexChanged)
			$comboboxHVHGWCluster.remove_SelectedIndexChanged($comboboxHVHGWCluster_SelectedIndexChanged)
			$comboboxHNVfrontEndNetwork.remove_SelectedIndexChanged($comboboxHNVfrontEndNetwork_SelectedIndexChanged)
			$comboboxHNVMgtNetwork.remove_SelectedIndexChanged($comboboxHNVMgtNetwork_SelectedIndexChanged)
			$buttonConnectVMM.remove_Click($buttonConnectVMM_Click)
			$textboxVMMServer.remove_Validating($textboxVMMServer_Validating)
			$textboxVMMServer.remove_Validated($textboxVMMServer_Validated)
			$buttonImportVMMnetworkService.remove_Click($buttonImportVMMnetworkService_Click)
			$buttonMigrateNetwork.remove_Click($buttonMigrateNetwork_Click)
			$checkboxMigrateSingleNetwork.remove_CheckedChanged($checkboxMigrateSingleNetwork_CheckedChanged)
			$buttonMigrateGWCluster.remove_Click($buttonMigrateGWCluster_Click)
			$comboboxTargetGWCluster.remove_SelectedIndexChanged($comboboxTargetGWCluster_SelectedIndexChanged)
			$buttonLoadGWData.remove_Click($buttonLoadGWData_Click)
			$comboboxSourceGWCluster.remove_SelectedIndexChanged($comboboxSourceGWCluster_SelectedIndexChanged)
			$buttonAddIP.remove_Click($buttonAddIP_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$Deploy.SuspendLayout()
	$groupboxVMNodeInput.SuspendLayout()
	$groupboxGWInput.SuspendLayout()
	$Import.SuspendLayout()
	$groupboxImportNetworkService.SuspendLayout()
	$Migrate.SuspendLayout()
	$groupboxGatewayMigration.SuspendLayout()
	$Tools.SuspendLayout()
	$groupboxAddExtIp.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($tabcontrol1)
	$MainForm.ClientSize = '908, 664'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAA
AAAAAAD9//////////Pu7//q4uX/6eLk/+nj5f/p4+T/6OLk/+rk5f/o4eP/6uPl/+rj5f/p4uT/
6uPl/+ri5f/p4uT/6eHk/+rj5f/r4+T/6uHi/+ni4//q4+T/6uPk/+rj5v/p4uX/6uTl/+nj4//p
5OT/6OLj/+zn6//5+Pv//v/+//7////h1M7/uJN9/7KJcv+1jHX/uI92/7WMc/+7kXj/sIdu/7yT
ev+2i3L/s4hv/72Ref+2inT/tYlz/72Qev+8kHr/tIhy/7aKdf+9knz/vJJ8/7eNeP+2jHb/s4ly
/7mPeP+0inT/uY55/7KJcv+3jnT/s4t4/9TCvP/3+/r/+fn5/7SJdv+wdlr/pHFW/7N+Y/+oc1b/
tn9j/6lyVf+ye1//sHlc/6h0V/+0f2L/rHdb/655X/+2gWf/sX1i/7B7YP+2gmj/tIFp/7N/Z/+0
f2f/r3ph/695YP+td1v/rXdc/696XP+sd1f/sHpb/6p2Wf+sd1n/rIFu/+/t7P/08/L/rHtr/5pc
RP+pbVX/oWRM/6ZsUv+fZk7/pGxU/6NsUv+faE7/qHBZ/6RtVv+ocVr/qHJZ/6VuVv+nb1b/pG5V
/6JsU/+mcVX/pXBV/6tyWf+vdV3/qW5X/6RoUv+iZlD/pWlS/6NoUP+kaFD/o2lT/6JlTf+sdmP/
6uXl//f39v+XZFT/j1A1/5ZXQP+WVj//lVI9/41IMf+KRy7/h0Uu/4xLM/+KRi7/h0Ms/4M+J/+E
Pyb/gjwj/4RBKf+MRzH/i0gx/4tJMv+MSjP/j085/5BRPP+eXkn/nVxH/5dWQf+VVT7/mFhA/5VU
Pf+ZWUT/lFA7/55nV//s6ef/+Pb1/5RdTv+GQSn/iEMx/4pEMf9+OCj/q3xz/7WRjP+yjYf/sYyG
/7GLhf+xioP/sIuF/6mBff+zko3/jlxM/34vHf+AOSf/fjcl/343Jf9+NiP/fjcj/4A5Jf+FQCz/
i0cy/41INP+KRTP/jUg1/4pGMv+LRC//kVhI/+zp5//39/b/lllP/34xH/+EOir/gDUk/3kxIf+4
npv/iFJI/4hLRP+IS0X/iE1D/4lOQ/+HTEL/lWFa/6iCfv+nfnj/cCEQ/3wzIv96MB//ejAg/3sw
IP97MCD/ezAg/30yIv+COCf/gTcl/4c9K/+GPCr/iUAu/4M2JP+UWUr/7Onn//f39v+QU0r/fS8e
/30zI/98MSD/eS8g/7CNi/9yKhn/eCkX/3cpGP93KRb/eCsX/3MjE/+kdmz/nWlk/6F1b/9yIxL/
fTQj/3wwIP97MCD/ezAg/3swIP97MCD/fTIi/380JP9+NCL/hTso/4U7Kf+HPiz/hTgm/45TRP/s
6ef/9/f2/5BTSf93KRj/fDEi/3swH/97LyD/tZGP/3kyJP96MCH/ejEj/3oxIv95MSH/fDMj/20a
DP+TXVL/qX12/3IhEP99MyL/ezAf/3swIP97MCD/ezAg/3swIP97MCD/fjMj/4E3Jv+EOin/gjgn
/4c+LP+ENyX/k1hJ/+zp5//39/b/kFNJ/3gqGf99MyP/fTEh/3sxIf+4lJP/fTQl/3wxIP98MSH/
fDEh/3wxIf9+MyP/dykX/5ZiV/+qfnn/diMS/381JP98MSH/fDEh/3wxIf98MSH/fDEh/3wxIf9+
MyP/hDkp/4E2Jv+FOir/iUAu/4Y5J/+TWUr/7Ono//f49/+VV07/fjAf/4M4Kf+DNyf/fzUm/7mW
lf+BOSr/gjYm/4I3J/+CNyf/gjcn/4Q5Kf97LBv/mWRa/62BfP97KBf/hToq/4I3J/+CNyf/gjcn
/4I3J/+CNyf/gjcn/4I3J/+GOyv/hToq/4xBMf+LQjD/iTwq/5ZcTf/s6ef/9/f2/5hbUv+DNiP/
hz4s/4c9K/+FOyz/vZqZ/4Y/L/+HPCr/hz0r/4c8K/+HPCv/hz4t/34yH/+gaV3/sYd+/34vHP+I
Py//hj0q/4c8K/+HPCv/hzwr/4c8K/+HPSv/hjwq/4g/Lv+LQzH/j0Y1/4pCMf+OQzL/m2BT/+zo
5//39/b/nmBX/4o9Kv+ORTP/jkQx/4tBMf/AnZz/jUU1/45DMP+NRDL/jUQx/45DMv+ORTP/hTol
/6VuYf+1i4H/hDYj/49FNv+NRDH/jkMx/41DMf+NQzH/jkMx/45DMf+NQzH/jUUz/5FJN/+RSTf/
kEk4/5dMO/+cYlX/7Ojo//f39v+iZlz/kEQy/5RLOv+USjj/kEg3/8Sin/+TTDz/lEo3/5RKOP+W
Szn/lU06/5RPPP+NQy7/rHZq/7uVi/+NPyz/l08+/5VNOv+WTTv/lk07/5ZNO/+WTTv/lU07/5ZN
O/+TSzj/lE47/5ZOPf+aUkL/mE49/59lWP/t6en/9/f1/6RsXv+TSzn/mFFB/5hRQP+TTz3/x6mg
/5ZTQ/+XUD7/mFJB/5RNOv+PRjH/k0Y1/4c9KP+la1//sIZ6/4g4KP+QRzX/j0Uz/49FM/+PRTP/
j0Uz/45FM/+NRTP/kUUz/5hLOf+cVEL/mVVD/55ZSP+YUD7/o2pc/+zp5//39vX/qXBj/5hRP/+b
WEf/m1dG/5hVQv/JrKT/m1hI/5xYRv+WTz7/o2hb/7yclP+/nZr/xp2X/8Ggm//AoaD/wpuZ/8Od
l//CnJf/wZyX/8Gcl//BnJf/wJyX/7+dmP+9l5L/nmlg/5hNP/+hXkn/oFtK/59WRf+qcWL/7Ojn
//f29f+sdGb/nVZE/6BcS/+gW0r/nlpH/8yvp/+gXU7/oFZE/6RqXP/f2dj/5Ors/+Tm6//l6Ov/
5Ofp/+Xm6v/k6Ov/5Ojq/+To6v/k6Or/5Ojq/+To6v/k6Or/4+jq/+Xo6//j4N//s4J5/55WRv+j
YVD/o11L/693aP/s6Of/9vb1/692af+hWUj/pV9O/6ReTf+iXkv/zbGo/6ViUv+eUkD/waCU/+zu
8v/h3uD/4+Hj/+Ph4//j4eT/4+Lj/+Ph4//j4eP/4+Hj/+Ph4//j4eP/4+Hj/+Ph4//j4eP/4+Di
/+jo6v/f3dj/pGVX/6djUf+mY1H/rXZn/+3p6P/29vX/sHlr/6RcS/+nYlL/p2JR/6ZgT//Qs6v/
pmVW/51YRP++mIv/9vr9/+zo6v/s6+z/7Ovt/+zr7f/s6+3/7Ovt/+zr7f/s6+3/7Ovt/+zr7f/s
6+3/7Ovt/+zr7f/s6+3/7Orq//Dx9P+6h3j/pV5M/6ZiUP+ud2j/7Ojn//b19f+yf2z/pWVM/6hp
Vf+mZ1L/n2VT/861rf+naFj/pWRT/6ZmV//ey8b/+fr7//Py9f/z8vT/8/L0//Py9P/z8vT/8/L0
//Py9P/z8vT/8/L0//Py9P/z8vT/8/L0//Py9P/z8fD/9/j6/7uIe/+ubln/uHtn/7uLef/r5ej/
9/X1/7iFcv+vb1L/tHRY/7NzV/+vcFb/0biu/6lqWP+ubFL/rGlR/6ppUf+yf3D/5t3Y//3+///4
9/n/+fj6//n4+v/5+Pr/+fj6//n4+v/5+Pr/+fj6//n4+v/59/n/+PX3///////r4dv/toRs/8qc
gf/Nn4P/xpuH/+ri5v/29fb/uYd0/7JyVf+3dlv/t3db/7FvVv/czMf/18O7/9e9s//Yv7b/2cS6
/8Wjmv/XycX///////z6+v/+/v7//P39//3+/v///v////7////+/////v///v3+////////////
8Ofl/76ShP/Kk3f/y52D/9Cfg//HnIj/6uTn//X29f+8i3f/s3Za/7V6Yf+1eV//s3he/9G7r/+u
c1//sXZc/7F2Xv+3eGH/tnVb/7iEcv/5+PX///////7//////////v7///////////////////7+
/f//////3sbG/8idkP++j3f/yJd7/86gg//Mnob/06OL/8mgjf/q5Of/9Pb1/76Nev+1e13/tn9k
/7Z/ZP+xeWL/28rD/86xpP/PrZ//z62f/8+uoP/RsKL/yqmd/8yyrv/n3Nn/8e3r/+nf3v/4/Pn/
//////79/f///f3//v39///////DnI3/yZF1/9CkiP/Po4j/zqGK/82ji//Sp43/yqOP/+rk5//3
9fX/wpB9/7p/Yf+6g2f/vINm/7d/Z//Yxb//w6GN/8WejP/Gn47/yZ+O/8qejv/KpZH/wZB4/7qI
e//Gopb/s3pn/9jFvP//////////////////////3c3I/8CUff/PqJD/zaON/86kjf/QpZD/0KaP
/9Spkf/Ko5D/6uPn//b19f/DlID/u4Rm/7yHbf+/h23/uYVt/9jJwf+7k4H/wpN+/8KUgP/FlID/
xpWB/8eWhP/ElIL/1Lqw/9S9sf/HkXT/wpB+/9O3qf/r4dr/6uHf/9K9sf/EloD/z6WO/9Cmj//Q
po//0qiR/9Opkv/TqZL/16yV/82mk//q4+b/9fX1/8OXg/+9iGv/voxw/8CMcf+6iHD/z7So/9rE
u//av7j/2sC5/9nAuf/Ywbn/2cC6/9jAtf/dxLz/xqGV/8mbfv/Soor/x5eB/8WWf//El4D/yJuC
/9Kqj//TqZH/1KqS/9Srk//Vq5P/1auT/9Srk//YrpX/z6mV/+rj5v/29Pb/xZiI/8CLcP/EkHX/
xZB1/8WQef+/inP/v4lx/8GKcv/Bi3P/wY51/8OQd//Fknr/xpN8/8aTfP/Km4T/z6OM/8+kjv/Q
p5D/0qmR/9Wrk//Vq5T/1KqT/9atlP/XrpX/1q+V/9Wvlf/Vr5X/1a6V/9ewlf/Qq5f/6uPn//bz
9f/Jm4v/w5F1/8SVef/FlXn/xJV8/8aXf//HmYH/yZqD/8udhf/On4f/0aGJ/8+iiv/No4z/z6WP
/82ljv/Opo//0aiR/9Opkv/TqpP/1auU/9aslf/Xrpf/1rCZ/9ewmv/Wspv/1bKb/9aym//Vspv/
2LSd/9Oumv/r4+b/+vf5/8iikP/Ej3H/wpV3/8SVeP/Fln3/xpZ//8iZgP/KnH//zZ6C/86gh//Q
oYn/z6KK/82kiv/Ppoz/0aeP/9Opkf/Vq5L/1auR/9etk//Yrpb/2rCZ/9qxmv/Xspz/17Kc/9ey
nP/Wspz/1rKc/9azm//WsZj/z66i//Pw8///////5t7T/8ikk//LoZH/zKOT/82kkv/NpJL/z6WU
/9Cmlv/RqJf/z6mX/8+ql//Qqpn/0Kqb/9Ksnf/Trpz/1K6b/9Sunf/RrZ7/0q+f/9Oxof/TsqH/
07Gh/9Kxof/SsaH/0rGh/9Kyof/TsaH/1LCk/82xof/n3Nf///////z+////////+/n5//f29f/4
9/b/9/f0//f39P/39vX/9/b1//f29f/29vT/9vbz//b28//39vT/9vbz//X28//19vP/9fbz//b1
8//29fP/9PXz//T18//09fP/9vTz//b08//29PP/9fTz//b08//19PP/+Pj2////////////AAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAA=')
	#endregion
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "HNV Gateway VM Deployment and Migration Tool"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($Deploy)
	$tabcontrol1.Controls.Add($Import)
	$tabcontrol1.Controls.Add($Migrate)
	$tabcontrol1.Controls.Add($Tools)
	$tabcontrol1.Location = '12, 12'
	$tabcontrol1.Name = "tabcontrol1"
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '887, 640'
	$tabcontrol1.TabIndex = 0
	#
	# Deploy
	#
	$Deploy.Controls.Add($richtextbox1)
	$Deploy.Controls.Add($progressbaroverlayDeploy)
	$Deploy.Controls.Add($picturebox1)
	$Deploy.Controls.Add($groupboxVMNodeInput)
	$Deploy.Controls.Add($groupboxGWInput)
	$Deploy.Controls.Add($buttonConnectVMM)
	$Deploy.Controls.Add($textboxVMMServer)
	$Deploy.Controls.Add($labelVMMServerName)
	$Deploy.Location = '4, 26'
	$Deploy.Name = "Deploy"
	$Deploy.Padding = '3, 3, 3, 3'
	$Deploy.Size = '879, 610'
	$Deploy.TabIndex = 0
	$Deploy.Text = "Deploy"
	$Deploy.UseVisualStyleBackColor = $True
	#
	# richtextbox1
	#
	$richtextbox1.Location = '475, 21'
	$richtextbox1.Name = "richtextbox1"
	$richtextbox1.Size = '387, 270'
	$richtextbox1.TabIndex = 9
	$richtextbox1.Text = "Prerequisites before using this tool. Please make sure you have the following in place:

- DNS Forwarding to HNV Domain if you have a seperate domain for your HNV servers.

- Runas Account in VMM to add the HNV Network service to VMM

- Runas Account in VMM to be used as Local Administrator Password on the VM's

-A VMM Template with OS settings configured to join the Virtual Machine in the domain where the Hyper-V hosts are joined. It is required to have the Hyper-V hosts and the Gateway Virtual Machines in the same domain."
	#
	# progressbaroverlayDeploy
	#
	$progressbaroverlayDeploy.Location = '475, 563'
	$progressbaroverlayDeploy.Name = "progressbaroverlayDeploy"
	$progressbaroverlayDeploy.Size = '387, 23'
	$progressbaroverlayDeploy.TabIndex = 8
	$progressbaroverlayDeploy.Visible = $False
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
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
gg==')
	#endregion
	$picturebox1.Location = '475, 317'
	$picturebox1.Name = "picturebox1"
	$picturebox1.Size = '387, 204'
	$picturebox1.TabIndex = 6
	$picturebox1.TabStop = $False
	#
	# groupboxVMNodeInput
	#
	$groupboxVMNodeInput.Controls.Add($comboboxLocalAdmin)
	$groupboxVMNodeInput.Controls.Add($labelLocalAdministratorPa)
	$groupboxVMNodeInput.Controls.Add($buttonDeployGWVM1)
	$groupboxVMNodeInput.Controls.Add($textboxGWVMClusterIP)
	$groupboxVMNodeInput.Controls.Add($labelGWClusterIPAddress)
	$groupboxVMNodeInput.Controls.Add($textboxGWVMClusterName)
	$groupboxVMNodeInput.Controls.Add($labelGWNETBIOSClusterName)
	$groupboxVMNodeInput.Controls.Add($textboxHNVVMName2)
	$groupboxVMNodeInput.Controls.Add($comboboxHVHNode2)
	$groupboxVMNodeInput.Controls.Add($labelNode2VMNETBIOSName)
	$groupboxVMNodeInput.Controls.Add($labelHyperVNode2)
	$groupboxVMNodeInput.Controls.Add($labelNode2)
	$groupboxVMNodeInput.Controls.Add($textboxHNVVMName1)
	$groupboxVMNodeInput.Controls.Add($comboboxHVHNode1)
	$groupboxVMNodeInput.Controls.Add($labelNode1VMNETBIOSName)
	$groupboxVMNodeInput.Controls.Add($labelHyperVNode1)
	$groupboxVMNodeInput.Controls.Add($labelNode1)
	$groupboxVMNodeInput.Location = '27, 297'
	$groupboxVMNodeInput.Name = "groupboxVMNodeInput"
	$groupboxVMNodeInput.Size = '422, 298'
	$groupboxVMNodeInput.TabIndex = 4
	$groupboxVMNodeInput.TabStop = $False
	$groupboxVMNodeInput.Text = "VM Node Input"
	$groupboxVMNodeInput.Visible = $False
	#
	# comboboxLocalAdmin
	#
	$comboboxLocalAdmin.FormattingEnabled = $True
	$comboboxLocalAdmin.Location = '169, 230'
	$comboboxLocalAdmin.Name = "comboboxLocalAdmin"
	$comboboxLocalAdmin.Size = '248, 25'
	$comboboxLocalAdmin.TabIndex = 7
	#
	# labelLocalAdministratorPa
	#
	$labelLocalAdministratorPa.Location = '9, 233'
	$labelLocalAdministratorPa.Name = "labelLocalAdministratorPa"
	$labelLocalAdministratorPa.Size = '154, 23'
	$labelLocalAdministratorPa.TabIndex = 15
	$labelLocalAdministratorPa.Text = "Local Administrator Password"
	#
	# buttonDeployGWVM1
	#
	$buttonDeployGWVM1.Location = '262, 266'
	$buttonDeployGWVM1.Name = "buttonDeployGWVM1"
	$buttonDeployGWVM1.Size = '154, 23'
	$buttonDeployGWVM1.TabIndex = 99
	$buttonDeployGWVM1.Text = "Deploy Gateways"
	$buttonDeployGWVM1.UseVisualStyleBackColor = $True
	$buttonDeployGWVM1.add_Click($buttonDeployGWVM1_Click)
	#
	# textboxGWVMClusterIP
	#
	$textboxGWVMClusterIP.Location = '168, 204'
	$textboxGWVMClusterIP.Name = "textboxGWVMClusterIP"
	$textboxGWVMClusterIP.Size = '248, 23'
	$textboxGWVMClusterIP.TabIndex = 6
	#
	# labelGWClusterIPAddress
	#
	$labelGWClusterIPAddress.Location = '7, 207'
	$labelGWClusterIPAddress.Name = "labelGWClusterIPAddress"
	$labelGWClusterIPAddress.Size = '155, 23'
	$labelGWClusterIPAddress.TabIndex = 12
	$labelGWClusterIPAddress.Text = "GW Cluster IP Address:"
	#
	# textboxGWVMClusterName
	#
	$textboxGWVMClusterName.Location = '168, 177'
	$textboxGWVMClusterName.Name = "textboxGWVMClusterName"
	$textboxGWVMClusterName.Size = '248, 23'
	$textboxGWVMClusterName.TabIndex = 5
	#
	# labelGWNETBIOSClusterName
	#
	$labelGWNETBIOSClusterName.Location = '7, 180'
	$labelGWNETBIOSClusterName.Name = "labelGWNETBIOSClusterName"
	$labelGWNETBIOSClusterName.Size = '194, 23'
	$labelGWNETBIOSClusterName.TabIndex = 10
	$labelGWNETBIOSClusterName.Text = "GW NETBIOS Cluster Name:"
	#
	# textboxHNVVMName2
	#
	$textboxHNVVMName2.Location = '168, 141'
	$textboxHNVVMName2.Name = "textboxHNVVMName2"
	$textboxHNVVMName2.Size = '248, 23'
	$textboxHNVVMName2.TabIndex = 4
	#
	# comboboxHVHNode2
	#
	$comboboxHVHNode2.FormattingEnabled = $True
	$comboboxHVHNode2.Location = '168, 114'
	$comboboxHVHNode2.Name = "comboboxHVHNode2"
	$comboboxHVHNode2.Size = '248, 25'
	$comboboxHVHNode2.TabIndex = 3
	#
	# labelNode2VMNETBIOSName
	#
	$labelNode2VMNETBIOSName.Location = '7, 144'
	$labelNode2VMNETBIOSName.Name = "labelNode2VMNETBIOSName"
	$labelNode2VMNETBIOSName.Size = '155, 23'
	$labelNode2VMNETBIOSName.TabIndex = 7
	$labelNode2VMNETBIOSName.Text = "Node 2 VM NETBIOS Name:"
	#
	# labelHyperVNode2
	#
	$labelHyperVNode2.Location = '7, 117'
	$labelHyperVNode2.Name = "labelHyperVNode2"
	$labelHyperVNode2.Size = '155, 23'
	$labelHyperVNode2.TabIndex = 6
	$labelHyperVNode2.Text = "Hyper-V Node:"
	#
	# labelNode2
	#
	$labelNode2.Location = '7, 94'
	$labelNode2.Name = "labelNode2"
	$labelNode2.Size = '100, 23'
	$labelNode2.TabIndex = 5
	$labelNode2.Text = "Node 2:"
	#
	# textboxHNVVMName1
	#
	$textboxHNVVMName1.Location = '168, 68'
	$textboxHNVVMName1.Name = "textboxHNVVMName1"
	$textboxHNVVMName1.Size = '248, 23'
	$textboxHNVVMName1.TabIndex = 2
	#
	# comboboxHVHNode1
	#
	$comboboxHVHNode1.FormattingEnabled = $True
	$comboboxHVHNode1.Location = '168, 40'
	$comboboxHVHNode1.Name = "comboboxHVHNode1"
	$comboboxHVHNode1.Size = '248, 25'
	$comboboxHVHNode1.TabIndex = 1
	#
	# labelNode1VMNETBIOSName
	#
	$labelNode1VMNETBIOSName.Location = '7, 71'
	$labelNode1VMNETBIOSName.Name = "labelNode1VMNETBIOSName"
	$labelNode1VMNETBIOSName.Size = '155, 23'
	$labelNode1VMNETBIOSName.TabIndex = 2
	$labelNode1VMNETBIOSName.Text = "Node 1 VM NETBIOS Name:"
	#
	# labelHyperVNode1
	#
	$labelHyperVNode1.Location = '7, 43'
	$labelHyperVNode1.Name = "labelHyperVNode1"
	$labelHyperVNode1.Size = '155, 23'
	$labelHyperVNode1.TabIndex = 1
	$labelHyperVNode1.Text = "Hyper-V Node:"
	#
	# labelNode1
	#
	$labelNode1.Location = '7, 20'
	$labelNode1.Name = "labelNode1"
	$labelNode1.Size = '100, 23'
	$labelNode1.TabIndex = 0
	$labelNode1.Text = "Node 1:"
	#
	# groupboxGWInput
	#
	$groupboxGWInput.Controls.Add($comboboxHNVVMMRunas)
	$groupboxGWInput.Controls.Add($labelHNVVMMRunasAccount)
	$groupboxGWInput.Controls.Add($comboboxHNVfrontEndSubnet)
	$groupboxGWInput.Controls.Add($labelHNVFrontendSubnet)
	$groupboxGWInput.Controls.Add($comboboxHNVMgtSubnet)
	$groupboxGWInput.Controls.Add($labelHNVManagementSubnet)
	$groupboxGWInput.Controls.Add($comboboxHVHGWCluster)
	$groupboxGWInput.Controls.Add($labelHyperVGWCluster)
	$groupboxGWInput.Controls.Add($comboboxVMTemplate)
	$groupboxGWInput.Controls.Add($labelVMTemplate)
	$groupboxGWInput.Controls.Add($comboboxHNVBackendNetwork)
	$groupboxGWInput.Controls.Add($comboboxHNVfrontEndNetwork)
	$groupboxGWInput.Controls.Add($labelHNVBackendSwitch)
	$groupboxGWInput.Controls.Add($labelHNVFrontendNetwork)
	$groupboxGWInput.Controls.Add($comboboxHNVMgtNetwork)
	$groupboxGWInput.Controls.Add($labelHNVManagementNetwork)
	$groupboxGWInput.Location = '27, 50'
	$groupboxGWInput.Name = "groupboxGWInput"
	$groupboxGWInput.Size = '422, 241'
	$groupboxGWInput.TabIndex = 3
	$groupboxGWInput.TabStop = $False
	$groupboxGWInput.Text = "VM Gateway Input"
	$groupboxGWInput.Visible = $False
	#
	# comboboxHNVVMMRunas
	#
	$comboboxHNVVMMRunas.FormattingEnabled = $True
	$comboboxHNVVMMRunas.Location = '169, 157'
	$comboboxHNVVMMRunas.Name = "comboboxHNVVMMRunas"
	$comboboxHNVVMMRunas.Size = '247, 25'
	$comboboxHNVVMMRunas.TabIndex = 6
	#
	# labelHNVVMMRunasAccount
	#
	$labelHNVVMMRunasAccount.Location = '8, 160'
	$labelHNVVMMRunasAccount.Name = "labelHNVVMMRunasAccount"
	$labelHNVVMMRunasAccount.Size = '155, 23'
	$labelHNVVMMRunasAccount.TabIndex = 14
	$labelHNVVMMRunasAccount.Text = "HNV VMM Runas Account:"
	#
	# comboboxHNVfrontEndSubnet
	#
	$comboboxHNVfrontEndSubnet.FormattingEnabled = $True
	$comboboxHNVfrontEndSubnet.Location = '169, 103'
	$comboboxHNVfrontEndSubnet.Name = "comboboxHNVfrontEndSubnet"
	$comboboxHNVfrontEndSubnet.Size = '248, 25'
	$comboboxHNVfrontEndSubnet.TabIndex = 4
	$comboboxHNVfrontEndSubnet.add_SelectedIndexChanged($comboboxHNVfrontEndSubnet_SelectedIndexChanged)
	#
	# labelHNVFrontendSubnet
	#
	$labelHNVFrontendSubnet.Location = '8, 106'
	$labelHNVFrontendSubnet.Name = "labelHNVFrontendSubnet"
	$labelHNVFrontendSubnet.Size = '155, 23'
	$labelHNVFrontendSubnet.TabIndex = 12
	$labelHNVFrontendSubnet.Text = "HNV Frontend Subnet:"
	#
	# comboboxHNVMgtSubnet
	#
	$comboboxHNVMgtSubnet.FormattingEnabled = $True
	$comboboxHNVMgtSubnet.Location = '169, 49'
	$comboboxHNVMgtSubnet.Name = "comboboxHNVMgtSubnet"
	$comboboxHNVMgtSubnet.Size = '248, 25'
	$comboboxHNVMgtSubnet.TabIndex = 2
	#
	# labelHNVManagementSubnet
	#
	$labelHNVManagementSubnet.Location = '8, 51'
	$labelHNVManagementSubnet.Name = "labelHNVManagementSubnet"
	$labelHNVManagementSubnet.Size = '155, 23'
	$labelHNVManagementSubnet.TabIndex = 10
	$labelHNVManagementSubnet.Text = "HNV Management Subnet:"
	#
	# comboboxHVHGWCluster
	#
	$comboboxHVHGWCluster.FormattingEnabled = $True
	$comboboxHVHGWCluster.Location = '168, 212'
	$comboboxHVHGWCluster.Name = "comboboxHVHGWCluster"
	$comboboxHVHGWCluster.Size = '248, 25'
	$comboboxHVHGWCluster.TabIndex = 8
	$comboboxHVHGWCluster.add_SelectedIndexChanged($comboboxHVHGWCluster_SelectedIndexChanged)
	#
	# labelHyperVGWCluster
	#
	$labelHyperVGWCluster.Location = '7, 215'
	$labelHyperVGWCluster.Name = "labelHyperVGWCluster"
	$labelHyperVGWCluster.Size = '155, 23'
	$labelHyperVGWCluster.TabIndex = 8
	$labelHyperVGWCluster.Text = "Hyper-V GW Cluster:"
	#
	# comboboxVMTemplate
	#
	$comboboxVMTemplate.FormattingEnabled = $True
	$comboboxVMTemplate.Location = '168, 185'
	$comboboxVMTemplate.Name = "comboboxVMTemplate"
	$comboboxVMTemplate.Size = '248, 25'
	$comboboxVMTemplate.TabIndex = 7
	#
	# labelVMTemplate
	#
	$labelVMTemplate.Location = '7, 188'
	$labelVMTemplate.Name = "labelVMTemplate"
	$labelVMTemplate.Size = '155, 23'
	$labelVMTemplate.TabIndex = 6
	$labelVMTemplate.Text = "VM Template:"
	#
	# comboboxHNVBackendNetwork
	#
	$comboboxHNVBackendNetwork.FormattingEnabled = $True
	$comboboxHNVBackendNetwork.Location = '169, 130'
	$comboboxHNVBackendNetwork.Name = "comboboxHNVBackendNetwork"
	$comboboxHNVBackendNetwork.Size = '248, 25'
	$comboboxHNVBackendNetwork.TabIndex = 5
	#
	# comboboxHNVfrontEndNetwork
	#
	$comboboxHNVfrontEndNetwork.FormattingEnabled = $True
	$comboboxHNVfrontEndNetwork.Location = '169, 76'
	$comboboxHNVfrontEndNetwork.Name = "comboboxHNVfrontEndNetwork"
	$comboboxHNVfrontEndNetwork.Size = '248, 25'
	$comboboxHNVfrontEndNetwork.TabIndex = 3
	$comboboxHNVfrontEndNetwork.add_SelectedIndexChanged($comboboxHNVfrontEndNetwork_SelectedIndexChanged)
	#
	# labelHNVBackendSwitch
	#
	$labelHNVBackendSwitch.Location = '8, 133'
	$labelHNVBackendSwitch.Name = "labelHNVBackendSwitch"
	$labelHNVBackendSwitch.Size = '155, 23'
	$labelHNVBackendSwitch.TabIndex = 3
	$labelHNVBackendSwitch.Text = "HNV Backend Switch:"
	#
	# labelHNVFrontendNetwork
	#
	$labelHNVFrontendNetwork.Location = '8, 79'
	$labelHNVFrontendNetwork.Name = "labelHNVFrontendNetwork"
	$labelHNVFrontendNetwork.Size = '155, 23'
	$labelHNVFrontendNetwork.TabIndex = 2
	$labelHNVFrontendNetwork.Text = "HNV Frontend Network:"
	#
	# comboboxHNVMgtNetwork
	#
	$comboboxHNVMgtNetwork.FormattingEnabled = $True
	$comboboxHNVMgtNetwork.Location = '169, 21'
	$comboboxHNVMgtNetwork.Name = "comboboxHNVMgtNetwork"
	$comboboxHNVMgtNetwork.Size = '248, 25'
	$comboboxHNVMgtNetwork.TabIndex = 1
	$comboboxHNVMgtNetwork.add_SelectedIndexChanged($comboboxHNVMgtNetwork_SelectedIndexChanged)
	#
	# labelHNVManagementNetwork
	#
	$labelHNVManagementNetwork.Location = '8, 24'
	$labelHNVManagementNetwork.Name = "labelHNVManagementNetwork"
	$labelHNVManagementNetwork.Size = '155, 23'
	$labelHNVManagementNetwork.TabIndex = 0
	$labelHNVManagementNetwork.Text = "HNV Management Network:"
	#
	# buttonConnectVMM
	#
	$buttonConnectVMM.Location = '374, 19'
	$buttonConnectVMM.Name = "buttonConnectVMM"
	$buttonConnectVMM.Size = '75, 23'
	$buttonConnectVMM.TabIndex = 2
	$buttonConnectVMM.Text = "Connect"
	$buttonConnectVMM.UseVisualStyleBackColor = $True
	$buttonConnectVMM.add_Click($buttonConnectVMM_Click)
	#
	# textboxVMMServer
	#
	$textboxVMMServer.Location = '133, 21'
	$textboxVMMServer.Name = "textboxVMMServer"
	$textboxVMMServer.Size = '235, 23'
	$textboxVMMServer.TabIndex = 1
	$textboxVMMServer.add_Validating($textboxVMMServer_Validating)
	$textboxVMMServer.add_Validated($textboxVMMServer_Validated)
	#
	# labelVMMServerName
	#
	$labelVMMServerName.Location = '27, 24'
	$labelVMMServerName.Name = "labelVMMServerName"
	$labelVMMServerName.Size = '100, 23'
	$labelVMMServerName.TabIndex = 0
	$labelVMMServerName.Text = "VMM Server Name:"
	#
	# Import
	#
	$Import.Controls.Add($groupboxImportNetworkService)
	$Import.Location = '4, 25'
	$Import.Name = "Import"
	$Import.Padding = '3, 3, 3, 3'
	$Import.Size = '879, 611'
	$Import.TabIndex = 1
	$Import.Text = "Import"
	$Import.UseVisualStyleBackColor = $True
	#
	# groupboxImportNetworkService
	#
	$groupboxImportNetworkService.Controls.Add($progressbaroverlayImport)
	$groupboxImportNetworkService.Controls.Add($labelSpecifyTheHostgroupF)
	$groupboxImportNetworkService.Controls.Add($labelBackendLogicalNetwor)
	$groupboxImportNetworkService.Controls.Add($comboboxBackEndLogicalNetwork)
	$groupboxImportNetworkService.Controls.Add($buttonImportVMMnetworkService)
	$groupboxImportNetworkService.Controls.Add($checkedlistboxHostGroups)
	$groupboxImportNetworkService.Location = '15, 22'
	$groupboxImportNetworkService.Name = "groupboxImportNetworkService"
	$groupboxImportNetworkService.Size = '390, 421'
	$groupboxImportNetworkService.TabIndex = 0
	$groupboxImportNetworkService.TabStop = $False
	$groupboxImportNetworkService.Text = "Import NetworkService in VMM"
	$groupboxImportNetworkService.Visible = $False
	#
	# progressbaroverlayImport
	#
	$progressbaroverlayImport.Location = '6, 362'
	$progressbaroverlayImport.Name = "progressbaroverlayImport"
	$progressbaroverlayImport.Size = '362, 23'
	$progressbaroverlayImport.TabIndex = 5
	$progressbaroverlayImport.Visible = $False
	#
	# labelSpecifyTheHostgroupF
	#
	$labelSpecifyTheHostgroupF.Location = '7, 20'
	$labelSpecifyTheHostgroupF.Name = "labelSpecifyTheHostgroupF"
	$labelSpecifyTheHostgroupF.Size = '362, 23'
	$labelSpecifyTheHostgroupF.TabIndex = 4
	$labelSpecifyTheHostgroupF.Text = "Specify the hostgroup for which the network service will be available:"
	#
	# labelBackendLogicalNetwor
	#
	$labelBackendLogicalNetwor.Location = '6, 309'
	$labelBackendLogicalNetwor.Name = "labelBackendLogicalNetwor"
	$labelBackendLogicalNetwor.Size = '151, 23'
	$labelBackendLogicalNetwor.TabIndex = 3
	$labelBackendLogicalNetwor.Text = "Backend Logical Network:"
	#
	# comboboxBackEndLogicalNetwork
	#
	$comboboxBackEndLogicalNetwork.FormattingEnabled = $True
	$comboboxBackEndLogicalNetwork.Location = '163, 306'
	$comboboxBackEndLogicalNetwork.Name = "comboboxBackEndLogicalNetwork"
	$comboboxBackEndLogicalNetwork.Size = '206, 25'
	$comboboxBackEndLogicalNetwork.TabIndex = 2
	#
	# buttonImportVMMnetworkService
	#
	$buttonImportVMMnetworkService.Location = '294, 333'
	$buttonImportVMMnetworkService.Name = "buttonImportVMMnetworkService"
	$buttonImportVMMnetworkService.Size = '75, 23'
	$buttonImportVMMnetworkService.TabIndex = 1
	$buttonImportVMMnetworkService.Text = "Import"
	$buttonImportVMMnetworkService.UseVisualStyleBackColor = $True
	$buttonImportVMMnetworkService.add_Click($buttonImportVMMnetworkService_Click)
	#
	# checkedlistboxHostGroups
	#
	$checkedlistboxHostGroups.FormattingEnabled = $True
	$checkedlistboxHostGroups.Location = '6, 46'
	$checkedlistboxHostGroups.Name = "checkedlistboxHostGroups"
	$checkedlistboxHostGroups.Size = '363, 202'
	$checkedlistboxHostGroups.TabIndex = 0
	#
	# Migrate
	#
	$Migrate.Controls.Add($groupboxGatewayMigration)
	$Migrate.Location = '4, 25'
	$Migrate.Name = "Migrate"
	$Migrate.Size = '879, 611'
	$Migrate.TabIndex = 2
	$Migrate.Text = "Migrate"
	$Migrate.UseVisualStyleBackColor = $True
	#
	# groupboxGatewayMigration
	#
	$groupboxGatewayMigration.Controls.Add($buttonMigrateNetwork)
	$groupboxGatewayMigration.Controls.Add($labelSelectCustomerNetwor)
	$groupboxGatewayMigration.Controls.Add($comboboxSelectCustNetwork)
	$groupboxGatewayMigration.Controls.Add($checkboxMigrateSingleNetwork)
	$groupboxGatewayMigration.Controls.Add($progressbaroverlayMigrate)
	$groupboxGatewayMigration.Controls.Add($datagridVMNetworksTargetGW)
	$groupboxGatewayMigration.Controls.Add($datagridVMNetworksCurrentGW)
	$groupboxGatewayMigration.Controls.Add($buttonMigrateGWCluster)
	$groupboxGatewayMigration.Controls.Add($labelHNVFQDNDomain)
	$groupboxGatewayMigration.Controls.Add($textboxGWVMFQDNDomain)
	$groupboxGatewayMigration.Controls.Add($labelLabelTargetGWClusterIP)
	$groupboxGatewayMigration.Controls.Add($comboboxTargetGWCluster)
	$groupboxGatewayMigration.Controls.Add($labelTargetGatewayCluster)
	$groupboxGatewayMigration.Controls.Add($labelWarningVPNConnection)
	$groupboxGatewayMigration.Controls.Add($buttonLoadGWData)
	$groupboxGatewayMigration.Controls.Add($labelSourceGatewayCluster)
	$groupboxGatewayMigration.Controls.Add($comboboxSourceGWCluster)
	$groupboxGatewayMigration.Location = '27, 26'
	$groupboxGatewayMigration.Name = "groupboxGatewayMigration"
	$groupboxGatewayMigration.Size = '829, 428'
	$groupboxGatewayMigration.TabIndex = 1
	$groupboxGatewayMigration.TabStop = $False
	$groupboxGatewayMigration.Text = "Gateway Server migration:"
	$groupboxGatewayMigration.Visible = $False
	#
	# buttonMigrateNetwork
	#
	$buttonMigrateNetwork.Location = '618, 317'
	$buttonMigrateNetwork.Name = "buttonMigrateNetwork"
	$buttonMigrateNetwork.Size = '181, 23'
	$buttonMigrateNetwork.TabIndex = 17
	$buttonMigrateNetwork.Text = "Migrate Network"
	$buttonMigrateNetwork.UseVisualStyleBackColor = $True
	$buttonMigrateNetwork.Visible = $False
	$buttonMigrateNetwork.add_Click($buttonMigrateNetwork_Click)
	#
	# labelSelectCustomerNetwor
	#
	$labelSelectCustomerNetwor.Location = '22, 93'
	$labelSelectCustomerNetwor.Name = "labelSelectCustomerNetwor"
	$labelSelectCustomerNetwor.Size = '167, 23'
	$labelSelectCustomerNetwor.TabIndex = 16
	$labelSelectCustomerNetwor.Text = "Select Customer Network"
	$labelSelectCustomerNetwor.Visible = $False
	#
	# comboboxSelectCustNetwork
	#
	$comboboxSelectCustNetwork.FormattingEnabled = $True
	$comboboxSelectCustNetwork.Location = '195, 90'
	$comboboxSelectCustNetwork.Name = "comboboxSelectCustNetwork"
	$comboboxSelectCustNetwork.Size = '181, 25'
	$comboboxSelectCustNetwork.TabIndex = 15
	$comboboxSelectCustNetwork.Visible = $False
	#
	# checkboxMigrateSingleNetwork
	#
	$checkboxMigrateSingleNetwork.Location = '195, 17'
	$checkboxMigrateSingleNetwork.Name = "checkboxMigrateSingleNetwork"
	$checkboxMigrateSingleNetwork.Size = '187, 24'
	$checkboxMigrateSingleNetwork.TabIndex = 14
	$checkboxMigrateSingleNetwork.Text = "Migrate Single Network"
	$checkboxMigrateSingleNetwork.UseVisualStyleBackColor = $True
	$checkboxMigrateSingleNetwork.add_CheckedChanged($checkboxMigrateSingleNetwork_CheckedChanged)
	#
	# progressbaroverlayMigrate
	#
	$progressbaroverlayMigrate.Location = '445, 391'
	$progressbaroverlayMigrate.Name = "progressbaroverlayMigrate"
	$progressbaroverlayMigrate.Size = '354, 23'
	$progressbaroverlayMigrate.TabIndex = 13
	$progressbaroverlayMigrate.Visible = $False
	#
	# datagridVMNetworksTargetGW
	#
	$datagridVMNetworksTargetGW.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridVMNetworksTargetGW.Location = '445, 93'
	$datagridVMNetworksTargetGW.Name = "datagridVMNetworksTargetGW"
	$datagridVMNetworksTargetGW.Size = '354, 206'
	$datagridVMNetworksTargetGW.TabIndex = 12
	#
	# datagridVMNetworksCurrentGW
	#
	$datagridVMNetworksCurrentGW.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridVMNetworksCurrentGW.Location = '22, 93'
	$datagridVMNetworksCurrentGW.Name = "datagridVMNetworksCurrentGW"
	$datagridVMNetworksCurrentGW.Size = '354, 202'
	$datagridVMNetworksCurrentGW.TabIndex = 11
	#
	# buttonMigrateGWCluster
	#
	$buttonMigrateGWCluster.Location = '618, 346'
	$buttonMigrateGWCluster.Name = "buttonMigrateGWCluster"
	$buttonMigrateGWCluster.Size = '181, 23'
	$buttonMigrateGWCluster.TabIndex = 10
	$buttonMigrateGWCluster.Text = "Migrate GW Cluster"
	$buttonMigrateGWCluster.UseVisualStyleBackColor = $True
	$buttonMigrateGWCluster.add_Click($buttonMigrateGWCluster_Click)
	#
	# labelHNVFQDNDomain
	#
	$labelHNVFQDNDomain.Location = '445, 22'
	$labelHNVFQDNDomain.Name = "labelHNVFQDNDomain"
	$labelHNVFQDNDomain.Size = '167, 23'
	$labelHNVFQDNDomain.TabIndex = 9
	$labelHNVFQDNDomain.Text = "HNV FQDN Domain"
	$labelHNVFQDNDomain.Visible = $False
	#
	# textboxGWVMFQDNDomain
	#
	$textboxGWVMFQDNDomain.Location = '618, 21'
	$textboxGWVMFQDNDomain.Name = "textboxGWVMFQDNDomain"
	$textboxGWVMFQDNDomain.Size = '181, 23'
	$textboxGWVMFQDNDomain.TabIndex = 8
	$textboxGWVMFQDNDomain.Visible = $False
	#
	# labelLabelTargetGWClusterIP
	#
	$labelLabelTargetGWClusterIP.Location = '445, 302'
	$labelLabelTargetGWClusterIP.Name = "labelLabelTargetGWClusterIP"
	$labelLabelTargetGWClusterIP.Size = '354, 23'
	$labelLabelTargetGWClusterIP.TabIndex = 7
	$labelLabelTargetGWClusterIP.Text = "labelTargetGWClusterIP"
	$labelLabelTargetGWClusterIP.Visible = $False
	#
	# comboboxTargetGWCluster
	#
	$comboboxTargetGWCluster.FormattingEnabled = $True
	$comboboxTargetGWCluster.Location = '618, 49'
	$comboboxTargetGWCluster.Name = "comboboxTargetGWCluster"
	$comboboxTargetGWCluster.Size = '181, 25'
	$comboboxTargetGWCluster.TabIndex = 5
	$comboboxTargetGWCluster.add_SelectedIndexChanged($comboboxTargetGWCluster_SelectedIndexChanged)
	#
	# labelTargetGatewayCluster
	#
	$labelTargetGatewayCluster.Location = '445, 52'
	$labelTargetGatewayCluster.Name = "labelTargetGatewayCluster"
	$labelTargetGatewayCluster.Size = '167, 23'
	$labelTargetGatewayCluster.TabIndex = 4
	$labelTargetGatewayCluster.Text = "Target Gateway Cluster:"
	#
	# labelWarningVPNConnection
	#
	$labelWarningVPNConnection.Location = '22, 302'
	$labelWarningVPNConnection.Name = "labelWarningVPNConnection"
	$labelWarningVPNConnection.Size = '360, 67'
	$labelWarningVPNConnection.TabIndex = 3
	$labelWarningVPNConnection.Text = "Warning! 
VPN Connections detected on this cluster. Customer has to change the endpoint ip to the new cluster. Select a target cluster to get the new IP Address!"
	$labelWarningVPNConnection.Visible = $False
	#
	# buttonLoadGWData
	#
	$buttonLoadGWData.Location = '22, 19'
	$buttonLoadGWData.Name = "buttonLoadGWData"
	$buttonLoadGWData.Size = '103, 23'
	$buttonLoadGWData.TabIndex = 2
	$buttonLoadGWData.Text = "Load GW Data"
	$buttonLoadGWData.UseVisualStyleBackColor = $True
	$buttonLoadGWData.add_Click($buttonLoadGWData_Click)
	#
	# labelSourceGatewayCluster
	#
	$labelSourceGatewayCluster.Location = '22, 52'
	$labelSourceGatewayCluster.Name = "labelSourceGatewayCluster"
	$labelSourceGatewayCluster.Size = '167, 23'
	$labelSourceGatewayCluster.TabIndex = 2
	$labelSourceGatewayCluster.Text = "Source Gateway Cluster"
	#
	# comboboxSourceGWCluster
	#
	$comboboxSourceGWCluster.FormattingEnabled = $True
	$comboboxSourceGWCluster.Location = '195, 49'
	$comboboxSourceGWCluster.Name = "comboboxSourceGWCluster"
	$comboboxSourceGWCluster.Size = '181, 25'
	$comboboxSourceGWCluster.TabIndex = 1
	$comboboxSourceGWCluster.add_SelectedIndexChanged($comboboxSourceGWCluster_SelectedIndexChanged)
	#
	# Tools
	#
	$Tools.Controls.Add($groupboxAddExtIp)
	$Tools.Controls.Add($labelAddExtraIPToCustomer)
	$Tools.Location = '4, 25'
	$Tools.Name = "Tools"
	$Tools.Size = '879, 611'
	$Tools.TabIndex = 3
	$Tools.Text = "Tools"
	$Tools.UseVisualStyleBackColor = $True
	#
	# groupboxAddExtIp
	#
	$groupboxAddExtIp.Controls.Add($labelSelectAUnassignedIP)
	$groupboxAddExtIp.Controls.Add($comboboxUnassignedIP)
	$groupboxAddExtIp.Controls.Add($buttonAddIP)
	$groupboxAddExtIp.Controls.Add($labelVirtualNetwork)
	$groupboxAddExtIp.Controls.Add($comboboxVMNetwork)
	$groupboxAddExtIp.Location = '3, 3'
	$groupboxAddExtIp.Name = "groupboxAddExtIp"
	$groupboxAddExtIp.Size = '408, 155'
	$groupboxAddExtIp.TabIndex = 1
	$groupboxAddExtIp.TabStop = $False
	$groupboxAddExtIp.Text = "Add Extra External IP to Virtual Network"
	$groupboxAddExtIp.Visible = $False
	#
	# labelSelectAUnassignedIP
	#
	$labelSelectAUnassignedIP.Location = '7, 58'
	$labelSelectAUnassignedIP.Name = "labelSelectAUnassignedIP"
	$labelSelectAUnassignedIP.Size = '191, 23'
	$labelSelectAUnassignedIP.TabIndex = 4
	$labelSelectAUnassignedIP.Text = "Select a unassigned IP:"
	#
	# comboboxUnassignedIP
	#
	$comboboxUnassignedIP.FormattingEnabled = $True
	$comboboxUnassignedIP.Location = '204, 60'
	$comboboxUnassignedIP.Name = "comboboxUnassignedIP"
	$comboboxUnassignedIP.Size = '180, 25'
	$comboboxUnassignedIP.TabIndex = 3
	#
	# buttonAddIP
	#
	$buttonAddIP.Location = '286, 114'
	$buttonAddIP.Name = "buttonAddIP"
	$buttonAddIP.Size = '98, 23'
	$buttonAddIP.TabIndex = 2
	$buttonAddIP.Text = "Add IP"
	$buttonAddIP.UseVisualStyleBackColor = $True
	$buttonAddIP.add_Click($buttonAddIP_Click)
	#
	# labelVirtualNetwork
	#
	$labelVirtualNetwork.Location = '6, 32'
	$labelVirtualNetwork.Name = "labelVirtualNetwork"
	$labelVirtualNetwork.Size = '192, 23'
	$labelVirtualNetwork.TabIndex = 1
	$labelVirtualNetwork.Text = "Virtual Network"
	#
	# comboboxVMNetwork
	#
	$comboboxVMNetwork.FormattingEnabled = $True
	$comboboxVMNetwork.Location = '204, 29'
	$comboboxVMNetwork.Name = "comboboxVMNetwork"
	$comboboxVMNetwork.Size = '180, 25'
	$comboboxVMNetwork.TabIndex = 0
	#
	# labelAddExtraIPToCustomer
	#
	$labelAddExtraIPToCustomer.Location = '207, 424'
	$labelAddExtraIPToCustomer.Name = "labelAddExtraIPToCustomer"
	$labelAddExtraIPToCustomer.Size = '457, 159'
	$labelAddExtraIPToCustomer.TabIndex = 0
	$labelAddExtraIPToCustomer.Text = "Add extra IP to Customer Gateway:
http://vniklas.djungeln.se/2014/06/03/adding-more-external-ips-to-your-wap-nvgre-vms
Show Gateway Counters in Powershell:
https://cloudadministrator.wordpress.com/2014/05/27/getting-windows-server-gateway-functionality-with-powershell-in-vmm/

Option to add static routes with deployment

"
	$labelAddExtraIPToCustomer.Visible = $False
	#
	# errorproviderEmptyVMM
	#
	$errorproviderEmptyVMM.ContainerControl = $MainForm
	$groupboxAddExtIp.ResumeLayout()
	$Tools.ResumeLayout()
	$groupboxGatewayMigration.ResumeLayout()
	$Migrate.ResumeLayout()
	$groupboxImportNetworkService.ResumeLayout()
	$Import.ResumeLayout()
	$groupboxGWInput.ResumeLayout()
	$groupboxVMNodeInput.ResumeLayout()
	$Deploy.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#region Functions
	function Validate-IsEmptyTrim {
		<#
			.SYNOPSIS
				Validates if input is empty (ignores spaces).
		
			.DESCRIPTION
				Validates if input is empty (ignores spaces).
		
			.PARAMETER  Text
				A string containing an IP address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param ([string]$Text)
		
		if ($text -eq $null -or $text.Trim().Length -eq 0) {
			return $true
		}
		
		return $false
	}
	
	function Load-DataGridView {
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView]) {
			$DataGridView.DataSource = $Item
		} else {
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList]) {
				$array.AddRange($Item)
			} else {
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function Load-ListBox {
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append) {
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection]) {
			$listBox.Items.AddRange($Items)
		} elseif ($Items -is [Array]) {
			$listBox.BeginUpdate()
			foreach ($obj in $Items) {
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		} else {
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Load-ComboBox {
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append) {
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]]) {
			$ComboBox.Items.AddRange($Items)
		} elseif ($Items -is [Array]) {
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items) {
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		} else {
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Get-ScriptDirectory { 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	function Wait-NodesUp {
		for ($i = 0; $i -le 1; $i++) {
			$GWVMNode1, $GWVMNode2 | ForEach-Object {
				$node = "down"
				while ($node -ne "up") {
					$testnode = Test-NetConnection -ComputerName $_ -Port 5985
					if ($testnode.TcpTestSucceeded -eq $false) {
						Write-Host -ForegroundColor Red "Cannot reach $_ for Remote PowerShell"
						Clear-DnsClientCache
						Start-Sleep -Seconds 30
					} else {
						$node = "up"
					}
					
				}
			}
		}
	}
	
	function Construct-RunasAccount {
		param (
			$RunasAccount
		)
		$VMMRunasAccount = Get-SCRunAsAccount $RunasAccount
		$RunasDomainAccount = $VMMRunasAccount.Domain + "\" + $VMMRunasAccount.UserName
		return $RunasDomainAccount
	}
	
	function Deploy-GatewayVM {
		param (
			$VMMServer,
			$VMFENetwork,
			$VMFESubnet,
			$VMMGTNetwork,
			$VMMGTSubnet,
			$VMBENetwork,
			$HVHHost,
			$ServerName,
			$Domain,
			$VMTemplate,
			$VMLocalAdmin,
			$Cred
		)
		$script = {
			$Guid = [guid]::NewGuid()
			$ProfileGuid = "Profile_" + $Guid
			$TemplateGuid = "Template_" + $Guid
			$OSProfileGuid = "OSProfile_" + $Guid
			$GuidHW = [guid]::NewGuid()
			$GuidTMPL = [guid]::NewGuid()
			
			Import-Module virtualmachinemanager
			Get-SCVMMServer -ComputerName $USING:VMMServer | Out-Null
			
			New-SCVirtualScsiAdapter -JobGroup $GuidHW -AdapterID 7 -ShareVirtualScsiAdapter $false -ScsiControllerType DefaultTypeNoType
			New-SCVirtualDVDDrive -JobGroup $GuidHW -Bus 0 -LUN 1
			
			$VMFESubnet = Get-SCVMSubnet -Name $USING:VMFESubnet
			$VMFENetwork = Get-SCVMNetwork -Name $USING:VMFENetwork
			New-SCVirtualNetworkAdapter -JobGroup $GuidHW -MACAddress "00:00:00:00:00:00" -MACAddressType Static -VLanEnabled $false -Synthetic -EnableVMNetworkOptimization $false -EnableMACAddressSpoofing $false -EnableGuestIPNetworkVirtualizationUpdates $false -IPv4AddressType Static -IPv6AddressType Dynamic -VMSubnet $VMFESubnet -VMNetwork $VMFENetwork
			$VMMGTSubnet = Get-SCVMSubnet -Name $USING:VMMGTSubnet
			$VMMGTNetwork = Get-SCVMNetwork -Name $USING:VMMGTNetwork
			New-SCVirtualNetworkAdapter -JobGroup $GuidHW -MACAddress "00:00:00:00:00:00" -MACAddressType Static -VLanEnabled $false -Synthetic -EnableVMNetworkOptimization $false -EnableMACAddressSpoofing $false -EnableGuestIPNetworkVirtualizationUpdates $false -IPv4AddressType Static -IPv6AddressType Dynamic -VMSubnet $VMMGTSubnet -VMNetwork $VMMGTNetwork
			New-SCVirtualNetworkAdapter -JobGroup $GuidHW -Synthetic
			
			$CPUType = Get-SCCPUType | Where-Object { $_.Name -eq "3.60 GHz Xeon (2 MB L2 cache)" }
			$CapabilityProfile = Get-SCCapabilityProfile | Where-Object { $_.Name -eq "Hyper-V" }
			
			$Template = Get-SCVMTemplate | Where-Object { $_.Name -eq $using:VMTemplate }
			if ($Template.Generation -eq 1) {
				Set-SCVirtualCOMPort -NoAttach -GuestPort 1 -JobGroup $GuidHW
				Set-SCVirtualCOMPort -NoAttach -GuestPort 2 -JobGroup $GuidHW
				Set-SCVirtualFloppyDrive -RunAsynchronously -NoMedia -JobGroup $GuidHW
				New-SCHardwareProfile -CPUType $CPUType -Name $ProfileGuid -Description "Profile used to create a VM/Template" -CPUCount 4 -MemoryMB 8192 -DynamicMemoryEnabled $false -MemoryWeight 5000 -VirtualVideoAdapterEnabled $false -CPUExpectedUtilizationPercent 20 -DiskIops 0 -CPUMaximumPercent 100 -CPUReserve 0 -NumaIsolationRequired $false -NetworkUtilizationMbps 0 -CPURelativeWeight 100 -HighlyAvailable $true -HAVMPriority 2000 -DRProtectionRequired $false -NumLock $false -BootOrder "CD", "IdeHardDrive", "PxeBoot", "Floppy" -CPULimitFunctionality $false -CPULimitForMigration $false -CapabilityProfile $CapabilityProfile -Generation 1 -JobGroup $GuidHW | Out-Null
			}
			if ($Template.Generation -eq 2) {
				New-SCHardwareProfile -CPUType $CPUType -Name $ProfileGuid -Description "Profile used to create a VM/Template" -CPUCount 4 -MemoryMB 8192 -DynamicMemoryEnabled $false -MemoryWeight 5000 -CPUExpectedUtilizationPercent 20 -DiskIops 0 -CPUMaximumPercent 100 -CPUReserve 0 -NumaIsolationRequired $false -NetworkUtilizationMbps 0 -CPURelativeWeight 100 -HighlyAvailable $true -HAVMPriority 2000 -DRProtectionRequired $false -SecureBootEnabled $true -CPULimitFunctionality $false -CPULimitForMigration $false -CapabilityProfile $CapabilityProfile -Generation 2 -JobGroup $GuidHW | Out-Null
			}
			
			$HardwareProfile = Get-SCHardwareProfile | Where-Object { $_.Name -eq $ProfileGuid }
			
			$LocalAdministratorCredential = get-scrunasaccount -Name $using:VMLocalAdmin
			$DomainJoinCredential = $Using:Cred
			$OperatingSystem = Get-SCOperatingSystem | Where-Object { $_.Name -eq "Windows Server 2012 R2 Standard" }
			
			New-SCVMTemplate -Name $TemplateGuid -Template $Template -HardwareProfile $HardwareProfile -JobGroup $GuidTMPL -ComputerName $USING:ServerName -TimeZone 110 -LocalAdministratorCredential $LocalAdministratorCredential -Domain $Using:Domain -DomainJoinCredential $DomainJoinCredential -AnswerFile $null -OperatingSystem $OperatingSystem | Out-Null
			$template = Get-SCVMTemplate -All | Where-Object { $_.Name -eq $TemplateGuid }
			
			$virtualMachineConfiguration = New-SCVMConfiguration -VMTemplate $template -Name $USING:ServerName
			
			$vmHost = Get-SCVMHost -ComputerName $using:HVHHost
			
			Set-SCVMConfiguration -VMConfiguration $virtualMachineConfiguration -VMHost $vmHost
			Update-SCVMConfiguration -VMConfiguration $virtualMachineConfiguration
			
			$AllNICConfigurations = Get-SCVirtualNetworkAdapterConfiguration -VMConfiguration $virtualMachineConfiguration
			
			Update-SCVMConfiguration -VMConfiguration $virtualMachineConfiguration
			
			New-SCVirtualMachine -Name $USING:ServerName -VMConfiguration $virtualMachineConfiguration -Description "" -BlockDynamicOptimization $false -JobGroup $GuidTMPL -StartAction "NeverAutoTurnOnVM" -StopAction "SaveVM" | Out-Null
			
			Remove-SCVMTemplate $TemplateGuid
			
			Remove-SCHardwareProfile $ProfileGuid
			
			Start-SCVirtualMachine $USING:ServerName
		}
		Invoke-Command -ScriptBlock $script -ComputerName $VMMServer -ArgumentList $VMMServer,$VMFENetwork,$VMFESubnet,$VMMGTNetwork,$VMMGTSubnet,$VMBENetwork,$HVHHost,$ServerName,$Domain,$VMTemplate,$VMLocalAdmin,$Cred
	}
	
	function Configure-GatewayVM {
		param (
			$GWVMNode1,
			$GWVMNode2,
			$RunasAccount,
			$FENetworkSubnet,
			$MgtNetworkSubnet,
			$cred
		)
		$script = {
			
			Install-WindowsFeature Routing, Failover-Clustering -IncludeManagementTools
			
			net localgroup administrators $using:runasaccount /add
			
			$ManagementInterface = Get-NetIPConfiguration | Where-Object { $_.IPv4Address.IpAddress -match $using:MgtNetworkSubnet } | Select-Object -ExpandProperty InterfaceIndex
			$FEInterface = Get-NetIPConfiguration | Where-Object { $_.IPv4Address.IpAddress -match $using:FENetworkSubnet } | Select-Object -ExpandProperty InterfaceIndex
			
			Get-NetAdapter | Where-Object { $_.Status -eq "Disconnected" } | Rename-NetAdapter -NewName "Backend"
			Get-NetAdapter -InterfaceIndex $FEInterface | Rename-NetAdapter -NewName "Frontend"
			Get-NetAdapter -InterfaceIndex $ManagementInterface | Rename-NetAdapter -NewName "Management"
			
			Install-RemoteAccess -MultiTenancy
			
			Enable-WSManCredSSP Server -Force
			
			Get-NetConnectionProfile -InterfaceAlias "Frontend" | Set-NetConnectionProfile -NetworkCategory Public
			#Get-NetConnectionProfile -InterfaceAlias "Backend" | Set-NetConnectionProfile -NetworkCategory Private
			Get-NetFirewallRule RemoteDesktop-UserMode-In-TCP | Set-NetFirewallRule -Enabled True -Profile @("Domain", "Private")
			Start-Sleep -Seconds 2
			Stop-Computer -Force
		}
		Invoke-Command -ScriptBlock $script -ComputerName $GWVMNode1, $GWVMNode2 -ArgumentList $RunasAccount,$FENetworkSubnet,$MgtNetworkSubnet -Credential $cred
	}
	
	function Configure-GatewayBackendNetwork {
		param (
			$GWVMNode1,
			$GWVMNode2,
			$VMMServer,
			$BENetwork
		)
		$script = {
			Import-Module virtualmachinemanager
			Get-SCVMMServer -ComputerName $USING:VMMServer | Out-Null
			$VM1 = Get-SCVirtualMachine -Name $using:GWVMNode1
			$VM2 = Get-SCVirtualMachine -Name $using:GWVMNode2
			if ($VM1.Status -ne "PowerOff") {
				Stop-SCVirtualMachine $using:GWVMNode1
				while ($VM1.Status -ne "PowerOff") {
					Start-Sleep -Seconds 5
				}
			}
			
			$Guid = [guid]::NewGuid()
			
			Get-SCVirtualNetworkAdapter -VM $VM1| Where-Object { $_.LogicalNetwork -eq $null } | Set-SCVirtualNetworkAdapter -NoLogicalNetwork -VLanEnabled $false -VirtualNetwork $using:BENetwork -MACAddress "00:00:00:00:00:00" -MACAddressType Static -IPv4AddressType Dynamic -IPv6AddressType Dynamic -NoPortClassification -JobGroup $Guid
			
			$ClusterNonPossibleOwner = @()
			$ClusterNonPossibleOwner += Get-SCVMHost -ComputerName $VM2.HostName
			$ClusterPreferredOwner = @()
			$ClusterPreferredOwner += Get-SCVMHost -ComputerName  $VM1.HostName
			Set-SCVirtualMachine -VM $VM1 -Name $VM1.Name -JobGroup $Guid -ClusterNonPossibleOwner $ClusterNonPossibleOwner -ClusterPreferredOwner $ClusterPreferredOwner
			
			if ($VM2.Status -ne "PowerOff") {
				Stop-SCVirtualMachine $VM2
				while ($VM2.Status -ne "PowerOff") {
					Start-Sleep -Seconds 2
				}
			}
			
			$Guid = [guid]::NewGuid()
			
			Get-SCVirtualNetworkAdapter -VM $VM2 | Where-Object { $_.LogicalNetwork -eq $null } | Set-SCVirtualNetworkAdapter -NoLogicalNetwork -VLanEnabled $false -VirtualNetwork $using:BENetwork -MACAddress "00:00:00:00:00:00" -MACAddressType Static -IPv4AddressType Dynamic -IPv6AddressType Dynamic -NoPortClassification -JobGroup $Guid
			
			$ClusterNonPossibleOwner = @()
			$ClusterNonPossibleOwner += Get-SCVMHost -ComputerName $VM1.HostName
			$ClusterPreferredOwner = @()
			$ClusterPreferredOwner += Get-SCVMHost -ComputerName  $VM2.HostName
			
			Set-SCVirtualMachine -VM $VM2 -Name $VM2.Name -JobGroup $Guid -ClusterNonPossibleOwner $ClusterNonPossibleOwner -ClusterPreferredOwner $ClusterPreferredOwner
		}
		
		Invoke-Command -ScriptBlock $script -ComputerName $VMMServer -ArgumentList $VMMServer,$GWVMNode1, $GWVMNode2,$BENetwork
	}
	
	function Configure-SharedVHDX {
		param (
			$HVHNode1,
			$HVHNode2,
			$GWVMNode1,
			$GWVMNode2,
			$GWVMClusterName,
			$Cred
		)
		Start-Sleep -Seconds 2
		$script1 = {
			$GWVM1 = Get-VM $using:GWVMNode1 -ComputerName $using:HVHNode1
			
			$VMHDPath = (Get-VHD -VMId $GWVM1.id).Path
			$VMRootPath = Split-Path $VMHDPath
			$RootPath = Split-Path $VMRootPath
			New-Item -ItemType Directory -Path "$RootPath\VMMDisks\$using:GWVMClusterName"
			$Quorum = New-VHD -Path ("$RootPath\VMMDisks\" + $using:GWVMClusterName + "\HNV-Quorum.vhdx") -Dynamic -SizeBytes 1GB
			$RRAS = New-VHD -Path ("$RootPath\VMMDisks\" + $using:GWVMClusterName + "\HNV-RRAS.vhdx") -Dynamic -SizeBytes 10GB
			
			Add-VMHardDiskDrive -Path $Quorum.Path -VM $GWVM1 -SupportPersistentReservations
			Add-VMHardDiskDrive -Path $RRAS.Path -VM $GWVM1 -SupportPersistentReservations
			Start-VM $GWVM1
			$Disks = $Quorum.Path, $RRAS.Path
			return $Disks
		}
		
		$Disks = Invoke-Command -ScriptBlock $script1 -ComputerName $HVHNode1 -Credential $Cred -ArgumentList $HVHNode1,$GWVMNode1,$GWVMClusterName
		Start-Sleep -Seconds 2
		
		$script2 = {
			$Quorum = $using:Disks[0]
			$RRAS = $using:Disks[1]
			
			$GWVM2 = Get-VM $using:GWVMNode2 -ComputerName $using:HVHNode2
			
			Add-VMHardDiskDrive -Path $Quorum -VM $GWVM2 -SupportPersistentReservations -ComputerName $using:HVHNode2
			Add-VMHardDiskDrive -Path $RRAS -VM $GWVM2 -SupportPersistentReservations -ComputerName $using:HVHNode2
			Start-VM $GWVM2
		}
		
		Invoke-Command -ScriptBlock $script2 -ComputerName $HVHNode2 -Credential $Cred -ArgumentList $HVHNode2, $GWVMNode2, $Disks
	}
	
	function Configure-GatewayVMCluster {
		param (
			$GWVMNode1,
			$GWVMNode1FQDN,
			$GWVMNode2,
			$FENetworkSubnet,
			$ClusterName,
			$ClusterIP,
			$cred
		)
		
		Start-Sleep -Seconds 2
		$script = {
			Get-NetConnectionProfile -InterfaceAlias "Frontend" | Set-NetConnectionProfile -NetworkCategory Public
			#Get-NetConnectionProfile -InterfaceAlias "Backend" | Set-NetConnectionProfile -NetworkCategory Private
			
			$disks = Get-Disk | Where-Object { $_.OperationalStatus -ne "Online" }
			foreach ($disk in $disks) {
				if ($disk | Where-Object OperationalStatus -eq Offline) {
					$disk | Set-Disk -IsOffline $false
					if ($disk.PartitionStyle -eq "RAW") {
						$disk | Initialize-Disk -PartitionStyle GPT
					}
					if ($disk.IsReadOnly -eq $True) {
						$disk | Set-Disk -IsReadOnly $False
					}
					$disk | New-Partition -UseMaximumSize |
					Format-Volume -FileSystem NTFS -allocationunitsize 4096 -Force -Confirm:$false
				}
			}
			
			$fakeroute = 0
			if (((Get-NetRoute -InterfaceAlias Management).destinationprefix) -notcontains "0.0.0.0/0") {
				$fakeroute = 1
				New-NetRoute -InterfaceAlias Management -DestinationPrefix 0.0.0.0/0 -NextHop 1.2.3.4
			}
			
			$cluster = New-Cluster -Name $using:ClusterName -Node @($using:GWVMNode1, $using:GWVMNode2) -StaticAddress $using:ClusterIP -IgnoreNetwork $using:FENetworkSubnet
			
			$csvdisk = Get-ClusterResource | where { $_.OwnerGroup -eq "Available Storage" } | Select -ExpandProperty Name
			
			Add-ClusterSharedVolume -Cluster $cluster -Name @($csvdisk)
			
			Add-ClusterResourceType -Name "RAS Cluster Resource" -Dll $env:windir\System32\RasClusterRes.dll
			
			(Get-ClusterNetwork | Where-Object { $_.Role -eq 1 }).Role = 3
			
			if ($fakeroute -eq 1) {
				Remove-NetRoute -InterfaceAlias Management -DestinationPrefix 0.0.0.0/0 -Confirm:$false
			}
			
			Disable-WSManCredSSP Server
		}
		Invoke-Command -ScriptBlock $script -ComputerName $GWVMNode1FQDN -Authentication 'Credssp' -Credential $cred -ArgumentList $GWVMNode1,$GWVMNode2,$FENetworkSubnet,$ClusterIP,$ClusterName
	}
	
	function Add-VMMNetworkService {
		param (
			$VMMServer,
			$HostGroup,
			$HVHGatewayCluster,
			$HNVGWVMCluster,
			$HNVGWVMClusterNetbios,
			$BackendSwitch,
			$FEVMNetwork,
			$BELogicalNetwork,
			$RunasAccount
		)
		$script = {
			Import-Module virtualmachinemanager
			Get-SCVMMServer -ComputerName $using:VMMServer | Out-Null
			
			$credentials = Get-SCRunAsAccount -Name $using:RunasAccount
			$configurationProvider = Get-SCConfigurationProvider -Name "Microsoft Windows Server Gateway Provider"
			$vmHostGroups = @()
			foreach ($item in $using:HostGroup) {
				$vmHostGroups += Get-SCVMHostGroup -Name $item
			}
			Add-SCNetworkService -Name $using:HNVGWVMClusterNetbios -RunAsAccount $credentials -ConfigurationProvider $configurationProvider -VMHostGroup $vmHostGroups -ConnectionString "VMHost=$using:HVHGatewayCluster;GatewayVM=$using:HNVGWVMCluster;BackendSwitch=$using:BackendSwitch" -RunAsynchronously -Certificate $certificates
			
			$networkService = Get-SCNetworkService -Name $using:HNVGWVMClusterNetbios
			$frontEndAdapter = $networkService.NetworkAdapters | Where-Object { $_.AdapterName -eq "Frontend" }
			$FElogicalNetwork = Get-SCVMNetwork -Name $using:FEVMNetwork
			$FELogicalNetworkDefinition = $FElogicalNetwork.VMSubnet.LogicalNetworkDefinition
			Add-SCNetworkConnection -Name "Front End" -LogicalNetworkDefinition $FELogicalNetworkDefinition -Service $networkService -NetworkAdapter $frontEndAdapter -ConnectionType "FrontEnd" -RunAsynchronously
			
			$backEndAdapter = $networkService.NetworkAdapters | Where-Object { $_.AdapterName -eq "Backend" }
			$BELogicalNetworkDefinition = Get-SCLogicalNetworkDefinition | Where-Object { $_.LogicalNetwork -eq $using:BELogicalNetwork }
			Add-SCNetworkConnection -Name "Back End" -LogicalNetworkDefinition $BELogicalNetworkDefinition -Service $networkService -NetworkAdapter $backEndAdapter -ConnectionType "BackEnd" -RunAsynchronously
			
			Set-SCNetworkService -NetworkService $networkService -Name $using:HNVGWVMClusterNetbios -Description "" -ConnectionString "VMHost=$using:HVHGatewayCluster;GatewayVM=$using:HNVGWVMCluster;BackendSwitch=$using:BackendSwitch" -RunAsAccount $credentials
		}
		Invoke-Command -ScriptBlock	$script -ComputerName $VMMServer -ArgumentList $HostGroup,$HNVGWVMCluster,$HNVGWVMClusterNetbios,$BackendSwitch,$FEVMNetwork,$BELogicalNetwork,$RunasAccount
	}
	
	function Migrate-HNVgatewayCluster {
		param(
			$CurrentNetworkGatewayName,
			$NewNetworkGatewayName,
			$VMMServer
		)	
		$script = {
			Import-Module virtualmachinemanager
			Get-SCVMMServer -ComputerName $using:VMMServer | Out-Null
			
			$VMNetworks = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.NetworkGateway.Name -eq $using:CurrentNetworkGatewayName } | Select-Object -ExpandProperty VMNetwork
			foreach ($vmNetwork in $VMNetworks) {
				$VmNetworkGateway = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.Name -eq $vmNetwork.VMNetworkGateways.Name }
				$natconnections = $VmNetworkGateway.Natconnections
				$natrules = $VmNetworkGateway.Natconnections.Rules
				$vpnconnections = $VmNetworkGateway.VPNConnections
				$EffectiveRoutes = $VmNetworkGateway.EffectiveRoutes
				Remove-SCVMNetworkGateway -VMNetworkGateway $VmNetworkGateway
				
				$vmSubnet = Get-SCVMSubnet -VMNetwork $vmNetwork
				$gatewayDevice = Get-SCNetworkGateway -Name $using:NewNetworkGatewayName
				$VmNetworkGateway = Add-SCVMNetworkGateway -Name $vmNetwork.Name -EnableBGP $false -NetworkGateway $gatewayDevice -VMNetwork $vmNetwork
				$natConnection = Add-SCNATConnection -Name $vmNetwork.Name -VMNetworkGateway $VmNetworkGateway -ExternalIPAddress $natrules[0].ExternalIPAddress.IPAddressToString
				
				foreach ($Rule in $natrules) {
					Add-SCNATRule -Name $Rule.Name -Protocol $Rule.Protocol -InternalIPAddress $Rule.InternalIPAddress -ExternalPort $Rule.ExternalPort -NATConnection $natConnection -InternalPort $Rule.InternalPort
				}
				
				foreach ($vpn in $vpnconnections) {
					$runAsAccount = Get-SCRunAsAccount -Name $vpnconnections.Secret.Name
					$vpnConnection = Add-SCVPNConnection -Name $vpn.Name -VMNetworkGateway $VmNetworkGateway -Secret $runAsAccount -TargetIPv4VPNAddress $vpn.TargetVPNIPv4Address -AuthenticationMethod $vpn.AuthenticationMethod
					foreach ($route in $EffectiveRoutes) {
						Add-SCNetworkRoute -IPSubnet $route.IPSubnet -RunAsynchronously -VPNConnection $vpnConnection -VMNetworkGateway $VmNetworkGateway
					}
				}
			}
		}
		
		Invoke-Command -ScriptBlock $script -ComputerName $VMMServer -ArgumentList $CurrentNetworkGatewayName, $NewNetworkGatewayName
	}
	
	function Migrate-HNVNetwork {
		param (
			$CustomerVMNetwork,
			$NewNetworkGatewayName,
			$VMMServer
		)
		$script = {
			Import-Module virtualmachinemanager
			Get-SCVMMServer -ComputerName $using:VMMServer | Out-Null
			
			$vmNetwork = Get-SCVMNetwork -Name $using:CustomerVMNetwork
			$VmNetworkGateway = (Get-SCNetworkGateway).VMNetworkGateways | Where-Object { $_.Name -eq $vmNetwork.VMNetworkGateways.Name }
			$natconnections = $VmNetworkGateway.Natconnections
			$natrules = $VmNetworkGateway.Natconnections.Rules
			$vpnconnections = $VmNetworkGateway.VPNConnections
			$EffectiveRoutes = $VmNetworkGateway.EffectiveRoutes
			$x = Get-SCNetworkRoute -Gateway $VmNetworkGateway
			
			Remove-SCVMNetworkGateway -VMNetworkGateway $VmNetworkGateway
			
			$vmSubnet = Get-SCVMSubnet -VMNetwork $vmNetwork
			$gatewayDevice = Get-SCNetworkGateway -Name $using:NewNetworkGatewayName
			$VmNetworkGateway = Add-SCVMNetworkGateway -Name $vmNetwork.Name -EnableBGP $false -NetworkGateway $gatewayDevice -VMNetwork $vmNetwork
			$natConnection = Add-SCNATConnection -Name $vmNetwork.Name -VMNetworkGateway $VmNetworkGateway -ExternalIPAddress $natrules[0].ExternalIPAddress.IPAddressToString
			
			foreach ($Rule in $natrules) {
				Add-SCNATRule -Name $Rule.Name -Protocol $Rule.Protocol -InternalIPAddress $Rule.InternalIPAddress -ExternalPort $Rule.ExternalPort -NATConnection $natConnection -InternalPort $Rule.InternalPort
			}
			
			foreach ($vpn in $vpnconnections) {
				$runAsAccount = Get-SCRunAsAccount -Name $vpn.Secret.Name
				$vpnConnection = Add-SCVPNConnection -Name $vpn.Name -VMNetworkGateway $VmNetworkGateway -Secret $runAsAccount -TargetIPv4VPNAddress $vpn.TargetVPNIPv4Address -AuthenticationMethod $vpn.AuthenticationMethod
				foreach ($route in $EffectiveRoutes) {
					Add-SCNetworkRoute -IPSubnet $route.IPSubnet -RunAsynchronously -VPNConnection $vpnConnection -VMNetworkGateway $VmNetworkGateway
				}
			}
		}
		
		Invoke-Command -ScriptBlock $script -ComputerName $VMMServer -ArgumentList $CustomerVMNetwork, $NewNetworkGatewayName
	}
	
	function Add-ExternalIP {
		param (
			$ipaddress, # = "31.204.136.140"
			$newipaddress, # = "31.204.136.111"
			$ComputerName,
			$cred
		)
		$script = {
			$NetnatAddress = Get-NetNatExternalAddress | Where-Object { $_.IPAddress -eq $ipaddress }
			Add-NetNatExternalAddress -NatName $NetnatAddress.NatName -IPAddress $newipaddress -PortStart 1 -PortEnd 49151
		}
		Invoke-Command -ScriptBlock $script -ComputerName $ComputerName -Credential $cred
	}
	
	function Add-ExternalNAT {
		# This command adds the actual NAT Port rules
		#Add-NetNatStaticMapping -NatName f2566857-d818-4f69-a5db-43eb76a1d956 -Protocol TCP -ExternalIPAddress 31.204.136.111 -ExternalPort 80 -InternalIPAddress 10.134.253.2-InternalPort 80
		param (
		$ipaddressExternal = "31.204.136.111",
		$Protocol = "TCP",
		$PortInt = 80,
		$PortExt = 80,
		$ipaddressInternal = "10.134.253.2"
		)
		$NetnatAddress = Get-NetNatExternalAddress | Where-Object { $_.IPAddress -eq $ipaddressExternal }
		Add-NetNatStaticMapping -NatName $NetnatAddress.NatName -Protocol $Protocol -ExternalIPAddress $ipaddressExternal -ExternalPort $PortExt -InternalIPAddress $ipaddressInternal-InternalPort $PortInt
		
		
	}
	
	function Remove-ExternalIP {
		param (
		$ipaddress = "31.204.136.111"
		)
		$NetnatAddress = Get-NetNatExternalAddress | Where-Object { $_.IPAddress -eq $ipaddress }
		Remove-NetNatExternalAddress -NatName $NetnatAddress.NatName -ExternalAddressID $NetnatAddress.ExternalAddressID
	}
	
	function Remove-ExternalNAT {
		# This command remove the actual NAT Port rules
		#Remove-NetNatStaticMapping -NatName f2566857-d818-4f69-a5db-43eb76a1d956 -StaticMappingID 2
		param (
		$ipaddressExternal = "31.204.136.111"
		)
		$NetnatAddress = Get-NetNatExternalAddress | Where-Object { $_.IPAddress -eq $ipaddressExternal }
		Remove-NetNatStaticMapping -NatName $NetnatAddress.NatName -StaticMappingID 2
	}
	
	#endregion#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
